//         Project / File: Yagasoft.AutoNumbering.Plugins / CrmSchema.cs
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed Elsawalhy

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

[assembly: ProxyTypesAssemblyAttribute()]
namespace Yagasoft.AutoNumbering.Plugins
{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode()]
	public partial class XrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public XrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

		/// <summary>
		/// Gets a binding to the set of all <see cref="ActivityParty"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ActivityParty> ActivityPartySet
		{
			get
			{
				return this.CreateQuery<ActivityParty>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="AutoNumbering"/> entities.
		/// </summary>
		public System.Linq.IQueryable<AutoNumbering> AutoNumberingSet
		{
			get
			{
				return this.CreateQuery<AutoNumbering>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="AutoNumberingBacklog"/> entities.
		/// </summary>
		public System.Linq.IQueryable<AutoNumberingBacklog> AutoNumberingBacklogSet
		{
			get
			{
				return this.CreateQuery<AutoNumberingBacklog>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="AutoNumberingStream"/> entities.
		/// </summary>
		public System.Linq.IQueryable<AutoNumberingStream> AutoNumberingStreamSet
		{
			get
			{
				return this.CreateQuery<AutoNumberingStream>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="PluginType"/> entities.
		/// </summary>
		public System.Linq.IQueryable<PluginType> PluginTypeSet
		{
			get
			{
				return this.CreateQuery<PluginType>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SdkMessage"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SdkMessage> SdkMessageSet
		{
			get
			{
				return this.CreateQuery<SdkMessage>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SdkMessageFilter"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SdkMessageFilter> SdkMessageFilterSet
		{
			get
			{
				return this.CreateQuery<SdkMessageFilter>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SdkMessageProcessingStep"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SdkMessageProcessingStep> SdkMessageProcessingStepSet
		{
			get
			{
				return this.CreateQuery<SdkMessageProcessingStep>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SdkMessageProcessingStepImage"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SdkMessageProcessingStepImage> SdkMessageProcessingStepImageSet
		{
			get
			{
				return this.CreateQuery<SdkMessageProcessingStepImage>();
			}
		}
	}

	#endregion

	#region Extensions

    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class CrmGeneratorExtensions
	{
		/// <summary>
		/// Retrieves the label of the 'OptionSetValue' using the corresponding enum member constant
		/// and the language code given.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The label corresponding to the enum constant and the language code.</returns>
		public static string GetLabel(this Enum enumMember, int languageCode = 1033)
		{
			var enumType = enumMember.GetType();
			var enumParentType = enumType.DeclaringType;

			if (enumParentType == null)
			{
				return "NO_LABEL";
			}

			var enumsType = enumParentType.GetNestedType("Enums");

			if (enumsType == null)
			{
				return "NO_LABEL";
			}

			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumType.Name.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(enumMember + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.InRange,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;

			var localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.Required);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields
				                    where Attribute.IsDefined(fieldQ, typeof (RequiredAttribute))
				                          && fieldQ.GetValue(entityRecord) == null
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage =
						                           localisation.Localisation.ToDictionary(local => local.Key, local => local.Value),
					                           ErrorType = ValidationType.Required
				                           });
			}

			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.InRange);

			if (localisation != null)
			{
				foreach (var field in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (InRangeAttribute)) && fieldQ.GetValue(entityRecord) != null))
				{
					var fieldValue = field.GetValue(entityRecord);
					Type type = field.GetCustomAttribute<InRangeAttribute>().Type;

					var method = type.GetMethods().FirstOrDefault(methodQ => methodQ.GetParameters().Length == 1 && methodQ.Name == "Parse");

					var min = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Min});
					var max = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Max});

					if (fieldValue != null && (min.CompareTo(fieldValue) == 1 || max.CompareTo(fieldValue) == -1))
					{
						exceptions.Add(new ValidationError
						               {
							               RecordId = id,
							               AttributeName = field.Name,
							               ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
									               local => string.Format(local.Value, min, max, fieldValue)),
							               ErrorType = ValidationType.InRange,
							               NumericValue = decimal.Parse(fieldValue.ToString()),
							               NumericRangeMin = decimal.Parse(min.ToString()),
							               NumericRangeMax = decimal.Parse(max.ToString())
						               });
					}
				}
			}


			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.MaxLength);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (MaxLengthAttribute)))
				                    let fieldValue = fieldQ.GetValue(entityRecord) as string
				                    let maxLength = fieldQ.GetCustomAttribute<MaxLengthAttribute>().Max
				                    where fieldValue != null && fieldValue.Length > maxLength
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
							                           local => string.Format(local.Value, maxLength, fieldValue)),
					                           ErrorType = ValidationType.MaxLength,
					                           StringValue = fieldValue,
					                           StringMaxLength = maxLength
				                           });
			}

			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this Entity crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;


			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in typeof(TEntity).GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
						&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, FieldInfo field, Entity crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			if (!crmRecord.Attributes.Contains(mapping.LogicalName))
			{
				return;
			}

			var value = crmRecord[mapping.LogicalName];

			// convert types
			if (value is OptionSetValue)
			{
				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(Nullable.GetUnderlyingType(field.FieldType),
					((OptionSetValue)value).Value));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (value is Money)
			{
				field.SetValue(entity, ((Money)value).Value);
			}
			else if (value is EntityReference && field.FieldType != typeof(EntityReference))
			{
				var entityRef = (EntityReference) value;

				field.SetValue(entity, entityRef.Id);

				var nameField = typeof(TEntity).GetFields().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, FieldInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelations = crmRecord.RelatedEntities
				.Where(relationQ => relationQ.Key.SchemaName == mapping.SchemaName
									&& relationQ.Key.PrimaryEntityRole == mapping.Role);

			// if relation not found in CRM record, exit
			if (!crmRelations.Any())
			{
				return;
			}

			var crmRelatedRecords = crmRelations.First().Value.Entities;

			// if there are not related entities in the CRM relation, exit
			if (!crmRelatedRecords.Any())
			{
				return;
			}

			var fieldType = field.FieldType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, crmRelatedRecords.Count);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType
					.GetMethod("ConvertTo").MakeGenericMethod(elementType);

				// convert all entities to contract entities
				var objectRelatedRecords = (from object relatedRecord in crmRelatedRecords
											select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				// N-1 relation
				var relatedRecord = crmRelatedRecords.FirstOrDefault();

				if (relatedRecord != null)
				{
					// go over all fields in the contract entity that has the mapping attribute
					foreach (var fieldT in typeof(TEntity).GetFields()
						.Where(fieldQ => fieldQ.Name.Contains(field.Name)
						&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
					{
						// get the value of the mapping attribute
						var mappingT = fieldT.GetCustomAttribute<CrmFieldMappingAttribute>();
						SetValueInRecord(record, fieldT, relatedRecord, mappingT);
					}
					// create the method reference that will be used to convert the related entities to the CRM entities
					var method = MethodBase.GetCurrentMethod().DeclaringType
						.GetMethod("ConvertTo").MakeGenericMethod(fieldType);

					convertedValue = method.Invoke(relatedRecord, new object[] { relatedRecord });
				}
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of properties, relations, and related entities' properties from CRM. Loads only properties and relations that are marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMembers(this Entity entity, IOrganizationService service)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(entity.GetDataMemberAttributes())).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}

			foreach (var relation in entity.GetType().GetProperties()
				.Where(relationQ => Attribute.IsDefined(relationQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(relationQ, typeof(RelationshipSchemaNameAttribute))
					&& relationQ.GetValue(entity) == null))
			{
				var returnType = relation.PropertyType.Name.Contains("[]") ? relation.PropertyType.GetElementType() : relation.PropertyType;

				var attributes = returnType.GetProperties()
					.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
					.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName);

				var method = entity.GetType().GetMethod("LoadRelation", new [] { typeof(string), typeof(IOrganizationService), typeof(bool), typeof(int), typeof(int), typeof(FilterExpression), typeof(string[]) });

                if (method == null)
                {
                    method = entity.GetType().GetMethod("LoadRelation", new[] { typeof(string), typeof(IOrganizationService), typeof(bool), typeof(string[]) });

                    if (method != null)
                    {
                        method.Invoke(entity, new object[] { relation.Name, service, entity is GeneratedEntity, attributes.ToArray() });
                    }
                }
                else
				{
                    method.Invoke(entity, new object[] { relation.Name, service, entity is GeneratedEntity, -1, -1, null, attributes.ToArray() });
                }
			}
            
            if (entity is GeneratedEntity) CrmHelpers.ProcessDeferredQueries(service, 3, (GeneratedEntity) entity);
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class GeneratedEntity : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		public GeneratedEntity()
		{}

		public GeneratedEntity(string logicalName) : base(logicalName)
		{}

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
		protected Microsoft.Xrm.Sdk.AttributeCollection backupAttributeCollection;
		protected FormattedValueCollection backupFormattedCollection;
		protected RelatedEntityCollection backupRelatedEntityCollection;
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		protected virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

		[OnSerializing]
		private void SerializingInitializer(StreamingContext ctx)
		{
			backupAttributeCollection = new Microsoft.Xrm.Sdk.AttributeCollection();
			backupAttributeCollection.AddRange(Attributes);
			Attributes.Clear();

			backupFormattedCollection = new FormattedValueCollection();
			backupFormattedCollection.AddRange(FormattedValues);
			FormattedValues.Clear();

			backupRelatedEntityCollection = new RelatedEntityCollection();
			backupRelatedEntityCollection.AddRange(RelatedEntities);
			RelatedEntities.Clear();
		}

		[OnSerialized]
		private void SerializedInitializer(StreamingContext ctx)
		{
			Attributes.Clear();
			Attributes.AddRange(backupAttributeCollection);
			backupAttributeCollection = null;

			FormattedValues.Clear();
			FormattedValues.AddRange(backupFormattedCollection);
			backupFormattedCollection = null;

			RelatedEntities.Clear();
			RelatedEntities.AddRange(backupRelatedEntityCollection);
			backupRelatedEntityCollection = null;
		}

		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public XrmServiceContext ServiceContext { get; set; }

		public event PropertyChangedEventHandler PropertyChanged;
		public event PropertyChangingEventHandler PropertyChanging;

		protected void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanging(string propertyName)
		{
			if (PropertyChanging != null)
			{
				PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}

		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = new Dictionary<int, string>();
								dictionary[1033] = englishLabel;
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);
			
			if (enumerable == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					enumerable = backupRelatedEntityCollection[key].Entities.Cast<TEntity>();
			}

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (result == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					result = (TEntity)backupRelatedEntityCollection[key].Entities.FirstOrDefault();
			}
			
			return result;
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, params string[] attributes)
		{
			LoadRelation(relationName, service, false, -1, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			LoadRelation(relationName, service, isDeferred, -1, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			LoadRelation(relationName, service, isDeferred, -1, -1, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, params string[] attributes)
		{
			LoadRelation(relationName, service, isDeferred, recordCountLimit, page, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(LoadRelationParams relationParams)
		{
			LoadRelation(relationParams.RelationName, relationParams.Service, relationParams.IsDeferred, relationParams.RecordCountLimit, relationParams.Page, relationParams.Filter, relationParams.Attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, FilterExpression filter, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationParams = RelationProperties[relationName];
			var queryActionObject = new QueryAction(CrmHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(CrmHelpers.LoadRelation(service, queryActionObject.Query));
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, XrmServiceContext context, params string[] attributes)
		{
			LoadRelation(relationName, service, context, false, -1, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, XrmServiceContext context, bool isDeferred, params string[] attributes)
		{
			LoadRelation(relationName, service, isDeferred, -1, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, XrmServiceContext context, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			LoadRelation(relationName, service, context, isDeferred, -1, -1, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, XrmServiceContext context, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			LoadRelation(relationName, service, context, isDeferred, recordCountLimit, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, XrmServiceContext context, bool isDeferred, int recordCountLimit, int page, params string[] attributes)
		{
			LoadRelation(relationName, service, context, isDeferred, recordCountLimit, page, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(string relationName, IOrganizationService service, XrmServiceContext context, bool isDeferred, int recordCountLimit, int page, FilterExpression filter, params string[] attributes)
		{
			if (context.MergeOption == MergeOption.NoTracking) {
				throw new Exception("Set 'MergeOption' to anything other than 'NoTracking' in the context before loading relationships.");
			}
			if (!RelationProperties.ContainsKey(relationName)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationParams = RelationProperties[relationName];
			var queryActionObject = new QueryAction(CrmHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  if (relatedRecords.Length <= 0) return;
								  foreach (Entity entity in relatedRecords) {
								  		var alreadyTracked = context.GetAttachedEntities().FirstOrDefault(attached => attached.Id == entity.Id);
								  		if (alreadyTracked == null) { context.Attach(entity); alreadyTracked = entity; }
								  		try { context.AttachLink(this, new Relationship((string) relationParams[7]), alreadyTracked); } catch { }
								  }
								  var newValue = GetType().GetProperty((string) relationParams[0]).GetValue(this, null);
								  if (newValue == null || (newValue.GetType().IsArray && (newValue as Array).Length != relatedRecords.Length)) {
								  	throw new Exception("Set 'MergeOption' to anything other than 'NoTracking' in the context before loading relationships.");
								  }
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(CrmHelpers.LoadRelation(service, queryActionObject.Query));
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class LoadRelationParams
	{
		public string RelationName;
		public IOrganizationService Service;
		public bool IsDeferred;
		public int RecordCountLimit = -1;
		public int Page = -1;
		public FilterExpression Filter;
		public string[] Attributes;

		public LoadRelationParams(string relationName, IOrganizationService service, params string[] attributes)
		{
			RelationName = relationName;
			Service = service;
			Attributes = attributes;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Class)]
	public class CrmEntityMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string SchemaName { get; private set; }
		public string DisplayName { get; private set; }

		public CrmEntityMappingAttribute(string logicalName, string schemaName, string displayName = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			LogicalName = logicalName;
			SchemaName = schemaName;
			DisplayName = displayName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class ReadOnlyFieldAttribute : Attribute
	{}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmFieldMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string RelatedEntity { get; private set; }

		public CrmFieldMappingAttribute(string logicalName, string relatedEntity = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			LogicalName = logicalName;
			RelatedEntity = relatedEntity;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmRelationMappingAttribute : Attribute
	{
		public string SchemaName { get; private set; }
		public Type RelatedEntityType { get; private set; }
		public EntityRole? Role { get; private set; }

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
		}

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType, EntityRole role)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
			Role = role;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class InRangeAttribute : Attribute
	{
		public string Min { get; set; }
		public string Max { get; set; }
		public Type Type { get; set; }

		public InRangeAttribute(string min, string max, Type type)
		{
			Min = min;
			Max = max;
			Type = type;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class MaxLengthAttribute : Attribute
	{
		public int Max { get; set; }

		public MaxLengthAttribute(int max)
		{
			Max = max;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class RequiredAttribute : Attribute
	{
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class LabelAttribute : Attribute
	{
		public string LabelFieldNames { get; set; }
		public string LogicalName { get; set; }
		public string IdFieldName { get; set; }
		public string FieldLogicalName { get; set; }

		public LabelAttribute(string labelFieldNames, string logicalName, string idFieldName, string fieldLogicalName)
		{
			LabelFieldNames = labelFieldNames;
			LogicalName = logicalName;
			IdFieldName = idFieldName;
			FieldLogicalName = fieldLogicalName;
		}
	}

	public enum ValidationType
	{
		Required,
		InRange,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class OptionsetLanguageLabel
	{
		public int LanguageCode { get; set; }
		public string OptionsetLabel {get; set;}
	}

	public enum ClearMode
	{
		[EnumMember] Disabled,
		[EnumMember] Empty,
		[EnumMember] Convention,
		[EnumMember] Flag
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public partial class EntityContract
	{
		[DataMember] public virtual ClearMode? ValueClearMode { get { return ClearMode.Disabled; } set{} }

		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("Entity '{0}' doesn't map to CRM entity '{1}'.",
					entityType.Name, typeof(TCrmEntity).Name));
			}
            
            clearMode = clearMode ?? (ClearMode?) entityType.GetProperty("ValueClearMode").GetValue(this) ?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
                // get the clear flag mode value if it exists
                var isClearFlag = value == null && clearMode == ClearMode.Flag
                    && (bool?)entityType.GetFields().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
                    .Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
                // check 'empty' mode
                var isClearEmpty = value == null && clearMode == ClearMode.Empty;

                var isSetValue = (value != null && !isReadOnly) || isClearFlag || isClearEmpty;

                // skip if no value and clear mode does not match and pass check
                if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}
			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);

				// skip if no value
				if (value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, FieldInfo fieldInfo)
		{
			var fields = GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (CrmRelationMappingAttribute))
				                 && !Attribute.IsDefined(fieldQ, typeof (CrmFieldMappingAttribute)));
			// get the field representing the relationship
			var relation = fields.First(fieldQ => fieldQ.Name == fieldInfo.Name.Split('_')[0]);
			// get the related entity type
			var fieldType = relation.FieldType;
			// get the target field in the related entity to set the value
			var field = fieldType.GetFields().First(fieldQ => fieldQ.Name == fieldInfo.Name.Substring(relation.Name.Length + 1));

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(fieldType);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			field.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			// if property not found, then the entities don't map correctly
			if (crmProperty == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}
            
			// if no value, and clear mode is global, then clear
			if (value == null && clearMode == ClearMode.Empty)
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				crmRecord[mapping.LogicalName] = (((int) value) == -1 && clearMode == ClearMode.Convention) ? null : new OptionSetValue((int) value);
			}
			else if (value is decimal? && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] = (value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention) ? null : new Money(((decimal?) value).Value);
			}
			else if (value is Guid? && fieldName != "Id"
					 && crmProperty.PropertyType != typeof(EntityReference))
			{
				crmProperty.SetValue(crmRecord, (value.Equals(Guid.Empty) && clearMode == ClearMode.Convention) ? null : (Guid?) value);
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime? && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int? && value.Equals(int.MinValue))
                        || (value is long? && value.Equals(long.MinValue))
                        || (value is decimal? && value.Equals(decimal.MinValue))
                        || (value is double? && value.Equals(double.MinValue))
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}

			object convertedValue = null;

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(mapping.RelatedEntityType, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), mapping.RelatedEntityType);

				// convert all entities to CRM entities
				var objectCrmRelatedRecords = (from object relatedRecord in relatedRecords
											   select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, mapping.RelatedEntityType);
				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")
				.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == mapping.Role;
								});

			return crmRelation;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class CrmHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return "NO_LABEL";
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null,params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page,
				filter, attributes), limit, page);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntity, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntity[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntity, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntity[] entities)
		{
			var errorList = new Dictionary<GeneratedEntity, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntity, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntity, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	#endregion

	#region Actions

	#endregion

	#region Known Types

	#endregion

	#region Entities

	#region ActivityParty

	/// <summary>
	/// 'ActivityParty'.<br />
	/// Person or group associated with an activity. An activity can have multiple activity parties.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("activityparty")]
	public partial class ActivityParty : GeneratedEntity
	{
		
		public ActivityParty() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Activity Party";
		public const string SchemaName = "ActivityParty";
		public const string EntityLogicalName = "activityparty";
		public const int EntityTypeCode = 135;
		
		#region Attributes

		[AttributeLogicalName("activitypartyid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ActivityPartyId == null || ActivityPartyId == Guid.Empty) ? base.Id : ActivityPartyId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("activitypartyid");
                    base.Id = value;
                } else {
				    ActivityPartyId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'ActivityId'.<br />
        /// Unique identifier of the activity associated with the activity party. (A "party" is any person who is associated with an activity.)
        /// </summary>
		[AttributeLogicalName("activityid")]
		public Guid? Activity
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (EntityReference) backupAttributeCollection["activityid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Activity");
                if (value != null)
				    SetAttributeValue("activityid", new EntityReference("activitypointer", value.Value));
                else
					SetAttributeValue("activityid", value);
				OnPropertyChanged("Activity");
			}
		}

        public string ActivityName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (EntityReference) backupAttributeCollection["activityid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ActivityPartyId'.<br />
        /// Unique identifier of the activity party.
        /// </summary>
		[AttributeLogicalName("activitypartyid")]
		public Guid? ActivityPartyId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("activitypartyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activitypartyid"))
				    value = (Guid?) backupAttributeCollection["activitypartyid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityPartyId");
                if (value != null)
					SetAttributeValue("activitypartyid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ActivityPartyId");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'AddressUsed'.<br />
        /// Email address to which an email is delivered, and which is associated with the target entity.
        /// </summary>
		[AttributeLogicalName("addressused"), MaxLength(200)]
		public string Address
		{
			get
			{
				var value = GetAttributeValue<string>("addressused");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("addressused"))
				    value = (string) backupAttributeCollection["addressused"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address");
					SetAttributeValue("addressused", value);
				OnPropertyChanged("Address");
			}
		}

        /// <summary>
        /// [Range(1, 2147483647)] 
		/// 'AddressUsedEmailColumnNumber'.<br />
        /// Email address column number from associated party.
        /// </summary>
		[AttributeLogicalName("addressusedemailcolumnnumber"), InRange("1", "2147483647", typeof(int))]
		public int? Emailcolumnnumberofparty
		{
			get
			{
				var value = GetAttributeValue<int?>("addressusedemailcolumnnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("addressusedemailcolumnnumber"))
				    value = (int?) backupAttributeCollection["addressusedemailcolumnnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Emailcolumnnumberofparty");
					SetAttributeValue("addressusedemailcolumnnumber", value);
				OnPropertyChanged("Emailcolumnnumberofparty");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotEmail'.<br />
        /// Information about whether to allow sending email to the activity party.
        /// </summary>
		[AttributeLogicalName("donotemail")]
		public bool? DonotallowEmails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotemail"))
				    value = (bool?) backupAttributeCollection["donotemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowEmails");
					SetAttributeValue("donotemail", value);
				OnPropertyChanged("DonotallowEmails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotFax'.<br />
        /// Information about whether to allow sending faxes to the activity party.
        /// </summary>
		[AttributeLogicalName("donotfax")]
		public bool? DonotallowFaxes
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotfax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotfax"))
				    value = (bool?) backupAttributeCollection["donotfax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowFaxes");
					SetAttributeValue("donotfax", value);
				OnPropertyChanged("DonotallowFaxes");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPhone'.<br />
        /// Information about whether to allow phone calls to the lead.
        /// </summary>
		[AttributeLogicalName("donotphone")]
		public bool? DonotallowPhoneCalls
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotphone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotphone"))
				    value = (bool?) backupAttributeCollection["donotphone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowPhoneCalls");
					SetAttributeValue("donotphone", value);
				OnPropertyChanged("DonotallowPhoneCalls");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPostalMail'.<br />
        /// Information about whether to allow sending postal mail to the lead.
        /// </summary>
		[AttributeLogicalName("donotpostalmail")]
		public bool? DonotallowPostalMails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotpostalmail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotpostalmail"))
				    value = (bool?) backupAttributeCollection["donotpostalmail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowPostalMails");
					SetAttributeValue("donotpostalmail", value);
				OnPropertyChanged("DonotallowPostalMails");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'Effort'.<br />
        /// Amount of effort used by the resource in a service appointment activity.
        /// </summary>
		[AttributeLogicalName("effort"), InRange("0", "1000000000", typeof(double))]
		public double? Effort
		{
			get
			{
				var value = GetAttributeValue<double?>("effort");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("effort"))
				    value = (double?) backupAttributeCollection["effort"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Effort");
					SetAttributeValue("effort", value);
				OnPropertyChanged("Effort");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'ExchangeEntryId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("exchangeentryid"), MaxLength(1024)]
		public string ExchangeEntry
		{
			get
			{
				var value = GetAttributeValue<string>("exchangeentryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangeentryid"))
				    value = (string) backupAttributeCollection["exchangeentryid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeEntry");
					SetAttributeValue("exchangeentryid", value);
				OnPropertyChanged("ExchangeEntry");
			}
		}

        /// <summary>
        ///  
		/// 'InstanceTypeCode'.<br />
        /// Type of instance of a recurring series.
        /// </summary>
		[AttributeLogicalName("instancetypecode")]
		public AppointmentTypeEnum? AppointmentType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("instancetypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("instancetypecode"))
				    value = (OptionSetValue) backupAttributeCollection["instancetypecode"];
                return value == null ? (AppointmentTypeEnum?) null : (AppointmentTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("AppointmentType");
                if (value != null)
				    SetAttributeValue("instancetypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("instancetypecode", value);
				OnPropertyChanged("AppointmentType");
			}
		}

        /// <summary>
        ///  
		/// 'IsPartyDeleted'.<br />
        /// Information about whether the underlying entity record is deleted.
        /// </summary>
		[AttributeLogicalName("ispartydeleted")]
		public bool? IsPartyDeleted
		{
			get
			{
				var value = GetAttributeValue<bool?>("ispartydeleted");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ispartydeleted"))
				    value = (bool?) backupAttributeCollection["ispartydeleted"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsPartyDeleted");
					SetAttributeValue("ispartydeleted", value);
				OnPropertyChanged("IsPartyDeleted");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'OwnerId'.<br />
        /// Unique identifier of the user or team who owns the activity_party.
        /// </summary>
		[AttributeLogicalName("ownerid"), Required]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ParticipationTypeMask'.<br />
        /// Role of the person in the activity, such as sender, to, cc, bcc, required, optional, organizer, regarding, or owner.
        /// </summary>
		[AttributeLogicalName("participationtypemask")]
		public ParticipationTypeEnum? ParticipationType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("participationtypemask");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("participationtypemask"))
				    value = (OptionSetValue) backupAttributeCollection["participationtypemask"];
                return value == null ? (ParticipationTypeEnum?) null : (ParticipationTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ParticipationType");
                if (value != null)
				    SetAttributeValue("participationtypemask", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("participationtypemask", value);
				OnPropertyChanged("ParticipationType");
			}
		}

        /// <summary>
        ///  
		/// 'PartyId'.<br />
        /// Unique identifier of the party associated with the activity.
        /// </summary>
		[AttributeLogicalName("partyid")]
		public EntityReference Party
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("partyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("partyid"))
				    value = (EntityReference) backupAttributeCollection["partyid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Party");
					SetAttributeValue("partyid", value);
				OnPropertyChanged("Party");
			}
		}

        public string PartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("partyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("partyid"))
				    value = (EntityReference) backupAttributeCollection["partyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ResourceSpecId'.<br />
        /// Unique identifier of the resource specification for the activity party.
        /// </summary>
		[AttributeLogicalName("resourcespecid")]
		public Guid? ResourceSpecification
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("resourcespecid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resourcespecid"))
				    value = (EntityReference) backupAttributeCollection["resourcespecid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ResourceSpecification");
                if (value != null)
				    SetAttributeValue("resourcespecid", new EntityReference("resourcespec", value.Value));
                else
					SetAttributeValue("resourcespecid", value);
				OnPropertyChanged("ResourceSpecification");
			}
		}

        public string ResourceSpecificationName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("resourcespecid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resourcespecid"))
				    value = (EntityReference) backupAttributeCollection["resourcespecid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ScheduledEnd'.<br />
        /// Scheduled end time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledend")]
		public DateTime? ScheduledEnd
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledend"))
				    value = (DateTime?) backupAttributeCollection["scheduledend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledEnd");
					SetAttributeValue("scheduledend", value);
				OnPropertyChanged("ScheduledEnd");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledStart'.<br />
        /// Scheduled start time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledstart")]
		public DateTime? ScheduledStart
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledstart"))
				    value = (DateTime?) backupAttributeCollection["scheduledstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledStart");
					SetAttributeValue("scheduledstart", value);
				OnPropertyChanged("ScheduledStart");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		public class RelationNames {
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ActivityParty(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["activitypartyid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region DonotallowEmails

		public enum DonotallowEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowFaxes

		public enum DonotallowFaxesEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPhoneCalls

		public enum DonotallowPhoneCallsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPostalMails

		public enum DonotallowPostalMailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region AppointmentType

		public enum AppointmentTypeEnum
		{
			[EnumMember]NotRecurring = 0,
			[EnumMember]RecurringMaster = 1,
			[EnumMember]RecurringInstance = 2,
			[EnumMember]RecurringException = 3,
			[EnumMember]RecurringFutureException = 4,
		}

		#endregion
	
		#region IsPartyDeleted

		public enum IsPartyDeletedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ParticipationType

		public enum ParticipationTypeEnum
		{
			[EnumMember]Sender = 1,
			[EnumMember]ToRecipient = 2,
			[EnumMember]CCRecipient = 3,
			[EnumMember]BCCRecipient = 4,
			[EnumMember]Requiredattendee = 5,
			[EnumMember]Optionalattendee = 6,
			[EnumMember]Organizer = 7,
			[EnumMember]Regarding = 8,
			[EnumMember]Owner = 9,
			[EnumMember]Resource = 10,
			[EnumMember]Customer = 11,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region AutoNumbering

	/// <summary>
	/// 'ldv_autonumbering'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_autonumbering")]
	public partial class AutoNumbering : GeneratedEntity
	{
		
		public AutoNumbering() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Auto-Numbering";
		public const string SchemaName = "ldv_autonumbering";
		public const string EntityLogicalName = "ldv_autonumbering";
		public const int EntityTypeCode = 10014;
		
		#region Attributes

		[AttributeLogicalName("ldv_autonumberingid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (AutoNumberingId == null || AutoNumberingId == Guid.Empty) ? base.Id : AutoNumberingId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_autonumberingid");
                    base.Id = value;
                } else {
				    AutoNumberingId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_autonumberingId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_autonumberingid")]
		public Guid? AutoNumberingId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_autonumberingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_autonumberingid"))
				    value = (Guid?) backupAttributeCollection["ldv_autonumberingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutoNumberingId");
                if (value != null)
					SetAttributeValue("ldv_autonumberingid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("AutoNumberingId");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ldv_BacklogThreshold'.<br />
        /// How far back (in minutes) to start looking at the backlog.
        /// </summary>
		[AttributeLogicalName("ldv_backlogthreshold"), InRange("0", "2147483647", typeof(int))]
		public int? BacklogThreshold
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_backlogthreshold");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_backlogthreshold"))
				    value = (int?) backupAttributeCollection["ldv_backlogthreshold"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BacklogThreshold");
					SetAttributeValue("ldv_backlogthreshold", value);
				OnPropertyChanged("BacklogThreshold");
			}
		}

		[AttributeLogicalName("ldv_condition"), MaxLength(1048576)]
		public string Condition
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_condition");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_condition"))
				    value = (string) backupAttributeCollection["ldv_condition"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Condition");
					SetAttributeValue("ldv_condition", value);
				OnPropertyChanged("Condition");
			}
		}

        /// <summary>
        /// [Required][Range(0, 2147483647)] 
		/// 'ldv_CurrentIndex'.<br />
        /// Set to zero to remove from the generated string.
        /// </summary>
		[AttributeLogicalName("ldv_currentindex"), Required, InRange("0", "2147483647", typeof(int))]
		public int? CurrentIndex
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_currentindex");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_currentindex"))
				    value = (int?) backupAttributeCollection["ldv_currentindex"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentIndex");
					SetAttributeValue("ldv_currentindex", value);
				OnPropertyChanged("CurrentIndex");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'ldv_EntityLogicalName'.<br />
        /// The logical name of the entity to generate a number for.
        /// </summary>
		[AttributeLogicalName("ldv_entitylogicalname"), MaxLength(256)]
		public string EntityLogicalName_ldv_EntityLogicalName
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_entitylogicalname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_entitylogicalname"))
				    value = (string) backupAttributeCollection["ldv_entitylogicalname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntityLogicalName_ldv_EntityLogicalName");
					SetAttributeValue("ldv_entitylogicalname", value);
				OnPropertyChanged("EntityLogicalName_ldv_EntityLogicalName");
			}
		}

        /// <summary>
        /// [MaximumLength=4000] 
		/// 'ldv_FieldLogicalName'.<br />
        /// Comma-separated list of destination fields.
        /// </summary>
		[AttributeLogicalName("ldv_fieldlogicalname"), MaxLength(4000)]
		public string FieldLogicalName
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_fieldlogicalname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_fieldlogicalname"))
				    value = (string) backupAttributeCollection["ldv_fieldlogicalname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FieldLogicalName");
					SetAttributeValue("ldv_fieldlogicalname", value);
				OnPropertyChanged("FieldLogicalName");
			}
		}

		[AttributeLogicalName("ldv_formatstring"), Required, MaxLength(4000)]
		public string FormatString
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_formatstring");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_formatstring"))
				    value = (string) backupAttributeCollection["ldv_formatstring"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FormatString");
					SetAttributeValue("ldv_formatstring", value);
				OnPropertyChanged("FormatString");
			}
		}

        /// <summary>
        /// [Required][Range(0, 2147483647)] 
		/// 'ldv_IndexPadding'.<br />
        /// Total length of the index in the resulting generated number. Set to zero for no padding.
        /// </summary>
		[AttributeLogicalName("ldv_indexpadding"), Required, InRange("0", "2147483647", typeof(int))]
		public int? IndexPadding
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_indexpadding");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_indexpadding"))
				    value = (int?) backupAttributeCollection["ldv_indexpadding"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IndexPadding");
					SetAttributeValue("ldv_indexpadding", value);
				OnPropertyChanged("IndexPadding");
			}
		}

		[AttributeLogicalName("ldv_isincrementonupdate")]
		public bool? IncrementOnUpdate
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isincrementonupdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isincrementonupdate"))
				    value = (bool?) backupAttributeCollection["ldv_isincrementonupdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IncrementOnUpdate");
					SetAttributeValue("ldv_isincrementonupdate", value);
				OnPropertyChanged("IncrementOnUpdate");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_IsNumberLetterRatio'.<br />
        /// Flag to use the number to letter ratio.
        /// </summary>
		[AttributeLogicalName("ldv_isnumberletterratio")]
		public bool? IsNumberLetterRatio
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isnumberletterratio");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isnumberletterratio"))
				    value = (bool?) backupAttributeCollection["ldv_isnumberletterratio"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsNumberLetterRatio");
					SetAttributeValue("ldv_isnumberletterratio", value);
				OnPropertyChanged("IsNumberLetterRatio");
			}
		}

		[AttributeLogicalName("ldv_israndomletterstart")]
		public bool? IsRandomLetterStart
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_israndomletterstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_israndomletterstart"))
				    value = (bool?) backupAttributeCollection["ldv_israndomletterstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsRandomLetterStart");
					SetAttributeValue("ldv_israndomletterstart", value);
				OnPropertyChanged("IsRandomLetterStart");
			}
		}

		[AttributeLogicalName("ldv_isusebacklog")]
		public bool? UseBacklog
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isusebacklog");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isusebacklog"))
				    value = (bool?) backupAttributeCollection["ldv_isusebacklog"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UseBacklog");
					SetAttributeValue("ldv_isusebacklog", value);
				OnPropertyChanged("UseBacklog");
			}
		}

		[AttributeLogicalName("ldv_isuseindexstreams")]
		public bool? UseIndexStreams
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isuseindexstreams");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isuseindexstreams"))
				    value = (bool?) backupAttributeCollection["ldv_isuseindexstreams"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UseIndexStreams");
					SetAttributeValue("ldv_isuseindexstreams", value);
				OnPropertyChanged("UseIndexStreams");
			}
		}

		[AttributeLogicalName("ldv_isvalidateuniquestring")]
		public bool? ValidateUniqueString
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isvalidateuniquestring");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isvalidateuniquestring"))
				    value = (bool?) backupAttributeCollection["ldv_isvalidateuniquestring"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ValidateUniqueString");
					SetAttributeValue("ldv_isvalidateuniquestring", value);
				OnPropertyChanged("ValidateUniqueString");
			}
		}

		[AttributeLogicalName("ldv_lastresetdate")]
		public DateTime? LastResetDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_lastresetdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_lastresetdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_lastresetdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastResetDate");
					SetAttributeValue("ldv_lastresetdate", value);
				OnPropertyChanged("LastResetDate");
			}
		}

        /// <summary>
        /// [MaximumLength=4000] 
		/// 'ldv_Locking'.<br />
        /// A field that can be used to lock the DB transaction.
        /// </summary>
		[AttributeLogicalName("ldv_locking"), MaxLength(4000)]
		public string Locking
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_locking");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_locking"))
				    value = (string) backupAttributeCollection["ldv_locking"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Locking");
					SetAttributeValue("ldv_locking", value);
				OnPropertyChanged("Locking");
			}
		}

		[AttributeLogicalName("ldv_name"), Required, MaxLength(400)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        /// [Range(0, 100)] 
		/// 'ldv_NumberLetterRatio'.<br />
        /// The percentage of letters in the generated random string.
        /// </summary>
		[AttributeLogicalName("ldv_numberletterratio"), InRange("0", "100", typeof(int))]
		public int? NumberLetterRatio
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_numberletterratio");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_numberletterratio"))
				    value = (int?) backupAttributeCollection["ldv_numberletterratio"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NumberLetterRatio");
					SetAttributeValue("ldv_numberletterratio", value);
				OnPropertyChanged("NumberLetterRatio");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_RegisterStepStageCode'.<br />
        /// Automatically adds a plugin step for the current configuration on the Create message. Clear value to remove step.
        /// </summary>
		[AttributeLogicalName("ldv_registerstepstagecode")]
		public AutoregisterStepStageEnum? AutoregisterStepStage
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_registerstepstagecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_registerstepstagecode"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_registerstepstagecode"];
                return value == null ? (AutoregisterStepStageEnum?) null : (AutoregisterStepStageEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("AutoregisterStepStage");
                if (value != null)
				    SetAttributeValue("ldv_registerstepstagecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_registerstepstagecode", value);
				OnPropertyChanged("AutoregisterStepStage");
			}
		}

        /// <summary>
        /// [MaximumLength=4000] 
		/// 'ldv_ReplacementCharacters'.<br />
        /// Regex expression to be replaced in the final string. Format: [regex1],[replacement1];[regex2],[replacement2]
        /// </summary>
		[AttributeLogicalName("ldv_replacementcharacters"), MaxLength(4000)]
		public string ReplacementCharacters
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_replacementcharacters");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_replacementcharacters"))
				    value = (string) backupAttributeCollection["ldv_replacementcharacters"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReplacementCharacters");
					SetAttributeValue("ldv_replacementcharacters", value);
				OnPropertyChanged("ReplacementCharacters");
			}
		}

		[AttributeLogicalName("ldv_resetdate")]
		public DateTime? ResetDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_resetdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_resetdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_resetdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ResetDate");
					SetAttributeValue("ldv_resetdate", value);
				OnPropertyChanged("ResetDate");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ldv_ResetIndex'.<br />
        /// The number to reset the index to on the set date.
        /// </summary>
		[AttributeLogicalName("ldv_resetindex"), InRange("0", "2147483647", typeof(int))]
		public int? ResetIndex
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_resetindex");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_resetindex"))
				    value = (int?) backupAttributeCollection["ldv_resetindex"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ResetIndex");
					SetAttributeValue("ldv_resetindex", value);
				OnPropertyChanged("ResetIndex");
			}
		}

		[AttributeLogicalName("ldv_resetinterval"), Required]
		public ResetIntervalEnum? ResetInterval
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_resetinterval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_resetinterval"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_resetinterval"];
                return value == null ? (ResetIntervalEnum?) null : (ResetIntervalEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ResetInterval");
                if (value != null)
				    SetAttributeValue("ldv_resetinterval", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_resetinterval", value);
				OnPropertyChanged("ResetInterval");
			}
		}

		[AttributeLogicalName("ldv_triggerid"), MaxLength(36)]
		public string TriggerID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_triggerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_triggerid"))
				    value = (string) backupAttributeCollection["ldv_triggerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TriggerID");
					SetAttributeValue("ldv_triggerid", value);
				OnPropertyChanged("TriggerID");
			}
		}

        /// <summary>
        /// [MaximumLength=36] 
		/// 'ldv_UniqueID'.<br />
        /// Use this ID in the 'unsecure config' of the plugin steps.
        /// </summary>
		[AttributeLogicalName("ldv_uniqueid"), MaxLength(36)]
		public string UniqueID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_uniqueid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_uniqueid"))
				    value = (string) backupAttributeCollection["ldv_uniqueid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UniqueID");
					SetAttributeValue("ldv_uniqueid", value);
				OnPropertyChanged("UniqueID");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Auto-Numbering
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Auto-Numbering
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId'
		/// </summary>
		[RelationshipSchemaName("ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId")]
		public AutoNumberingBacklog[] AutoNumberingBacklogsOfAutoNumberingConfig
		{
			get
			{
				var enumerable = GetRelatedEntities<AutoNumberingBacklog>("ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("AutoNumberingBacklogsOfAutoNumberingConfig");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<AutoNumberingBacklog>("ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId", null, value);
				OnPropertyChanged("AutoNumberingBacklogsOfAutoNumberingConfig");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_autonumbering_autonumberingstream_AutoNumberingConfigId'
		/// </summary>
		[RelationshipSchemaName("ldv_autonumbering_autonumberingstream_AutoNumberingConfigId")]
		public AutoNumberingStream[] AutoNumberingStreamsOfAutoNumberingConfig
		{
			get
			{
				var enumerable = GetRelatedEntities<AutoNumberingStream>("ldv_autonumbering_autonumberingstream_AutoNumberingConfigId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("AutoNumberingStreamsOfAutoNumberingConfig");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<AutoNumberingStream>("ldv_autonumbering_autonumberingstream_AutoNumberingConfigId", null, value);
				OnPropertyChanged("AutoNumberingStreamsOfAutoNumberingConfig");
			}
		}
		
		public class RelationNames {
			public const string AutoNumberingBacklogsOfAutoNumberingConfig = "AutoNumberingBacklogsOfAutoNumberingConfig";
			public const string AutoNumberingStreamsOfAutoNumberingConfig = "AutoNumberingStreamsOfAutoNumberingConfig";
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["AutoNumberingBacklogsOfAutoNumberingConfig"] = new object[] { "AutoNumberingBacklogsOfAutoNumberingConfig", "ldv_autonumberingbacklog", "ldv_autonumbering", "ldv_autonumberingconfigid", "ldv_autonumberingid", "ldv_autonumberingid", "ldv_autonumberingid", "ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId", typeof (AutoNumberingBacklog[]) };
			relationProperties["AutoNumberingStreamsOfAutoNumberingConfig"] = new object[] { "AutoNumberingStreamsOfAutoNumberingConfig", "ldv_autonumberingstream", "ldv_autonumbering", "ldv_autonumberingconfigid", "ldv_autonumberingid", "ldv_autonumberingid", "ldv_autonumberingid", "ldv_autonumbering_autonumberingstream_AutoNumberingConfigId", typeof (AutoNumberingStream[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public AutoNumbering(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_autonumberingid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region IncrementOnUpdate

		public enum IncrementOnUpdateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsNumberLetterRatio

		public enum IsNumberLetterRatioEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsRandomLetterStart

		public enum IsRandomLetterStartEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UseBacklog

		public enum UseBacklogEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UseIndexStreams

		public enum UseIndexStreamsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ValidateUniqueString

		public enum ValidateUniqueStringEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AutoregisterStepStage

		public enum AutoregisterStepStageEnum
		{
			[EnumMember]Preoperation = 753240000,
			[EnumMember]Postoperation = 753240001,
		}

		#endregion
	
		#region ResetInterval

		public enum ResetIntervalEnum
		{
			[EnumMember]Never = 0,
			[EnumMember]Once = 1,
			[EnumMember]Daily = 2,
			[EnumMember]Monthly = 3,
			[EnumMember]Yearly = 4,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return CrmHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return CrmHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string IncrementOnUpdate = "ldv_isincrementonupdate";
				public const string IsNumberLetterRatio = "ldv_isnumberletterratio";
				public const string IsRandomLetterStart = "ldv_israndomletterstart";
				public const string UseBacklog = "ldv_isusebacklog";
				public const string UseIndexStreams = "ldv_isuseindexstreams";
				public const string ValidateUniqueString = "ldv_isvalidateuniquestring";
				public const string AutoregisterStepStage = "ldv_registerstepstagecode";
				public const string ResetInterval = "ldv_resetinterval";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class IncrementOnUpdate 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(IncrementOnUpdate), label, languageCode);
					}
				}

				public static class IsNumberLetterRatio 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(IsNumberLetterRatio), label, languageCode);
					}
				}

				public static class IsRandomLetterStart 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(IsRandomLetterStart), label, languageCode);
					}
				}

				public static class UseBacklog 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(UseBacklog), label, languageCode);
					}
				}

				public static class UseIndexStreams 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(UseIndexStreams), label, languageCode);
					}
				}

				public static class ValidateUniqueString 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(ValidateUniqueString), label, languageCode);
					}
				}

				public static class AutoregisterStepStage 
				{
					public const string Preoperation_1033 = "Pre-operation";
					public const string Postoperation_1033 = "Post-operation";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(AutoregisterStepStage), label, languageCode);
					}
				}

				public static class ResetInterval 
				{
					public const string Never_1033 = "Never";
					public const string Once_1033 = "Once";
					public const string Daily_1033 = "Daily";
					public const string Monthly_1033 = "Monthly";
					public const string Yearly_1033 = "Yearly";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(ResetInterval), label, languageCode);
					}
				}

				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string AutoNumberingId = "ldv_autonumberingid";
			public const string BacklogThreshold = "ldv_backlogthreshold";
			public const string Condition = "ldv_condition";
			public const string CurrentIndex = "ldv_currentindex";
			public const string EntityLogicalName_ldv_EntityLogicalName = "ldv_entitylogicalname";
			public const string FieldLogicalName = "ldv_fieldlogicalname";
			public const string FormatString = "ldv_formatstring";
			public const string IndexPadding = "ldv_indexpadding";
			public const string IncrementOnUpdate = "ldv_isincrementonupdate";
			public const string IsNumberLetterRatio = "ldv_isnumberletterratio";
			public const string IsRandomLetterStart = "ldv_israndomletterstart";
			public const string UseBacklog = "ldv_isusebacklog";
			public const string UseIndexStreams = "ldv_isuseindexstreams";
			public const string ValidateUniqueString = "ldv_isvalidateuniquestring";
			public const string LastResetDate = "ldv_lastresetdate";
			public const string Locking = "ldv_locking";
			public const string Name = "ldv_name";
			public const string NumberLetterRatio = "ldv_numberletterratio";
			public const string AutoregisterStepStage = "ldv_registerstepstagecode";
			public const string ReplacementCharacters = "ldv_replacementcharacters";
			public const string ResetDate = "ldv_resetdate";
			public const string ResetIndex = "ldv_resetindex";
			public const string ResetInterval = "ldv_resetinterval";
			public const string TriggerID = "ldv_triggerid";
			public const string UniqueID = "ldv_uniqueid";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string AutoNumberingId = "ldv_autonumberingId";
				public const string BacklogThreshold = "ldv_BacklogThreshold";
				public const string Condition = "ldv_Condition";
				public const string CurrentIndex = "ldv_CurrentIndex";
				public const string EntityLogicalName_ldv_EntityLogicalName = "ldv_EntityLogicalName";
				public const string FieldLogicalName = "ldv_FieldLogicalName";
				public const string FormatString = "ldv_FormatString";
				public const string IndexPadding = "ldv_IndexPadding";
				public const string IncrementOnUpdate = "ldv_IsIncrementOnUpdate";
				public const string IsNumberLetterRatio = "ldv_IsNumberLetterRatio";
				public const string IsRandomLetterStart = "ldv_IsRandomLetterStart";
				public const string UseBacklog = "ldv_IsUseBacklog";
				public const string UseIndexStreams = "ldv_IsUseIndexStreams";
				public const string ValidateUniqueString = "ldv_IsValidateUniqueString";
				public const string LastResetDate = "ldv_LastResetDate";
				public const string Locking = "ldv_Locking";
				public const string Name = "ldv_name";
				public const string NumberLetterRatio = "ldv_NumberLetterRatio";
				public const string AutoregisterStepStage = "ldv_RegisterStepStageCode";
				public const string ReplacementCharacters = "ldv_ReplacementCharacters";
				public const string ResetDate = "ldv_ResetDate";
				public const string ResetIndex = "ldv_ResetIndex";
				public const string ResetInterval = "ldv_ResetInterval";
				public const string TriggerID = "ldv_TriggerID";
				public const string UniqueID = "ldv_UniqueID";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class AutoNumberingId
				{
					public const string _1033 = "Auto-Numbering";
				}

				public static class BacklogThreshold
				{
					public const string _1033 = "Backlog Threshold";
				}

				public static class Condition
				{
					public const string _1033 = "Condition";
				}

				public static class CurrentIndex
				{
					public const string _1033 = "Current Index";
				}

				public static class EntityLogicalName_ldv_EntityLogicalName
				{
					public const string _1033 = "Entity Logical Name";
				}

				public static class FieldLogicalName
				{
					public const string _1033 = "Field Logical Name";
				}

				public static class FormatString
				{
					public const string _1033 = "Format String";
				}

				public static class IndexPadding
				{
					public const string _1033 = "Index Padding";
				}

				public static class IncrementOnUpdate
				{
					public const string _1033 = "Increment OnUpdate";
				}

				public static class IsNumberLetterRatio
				{
					public const string _1033 = "Is Number Letter Ratio";
				}

				public static class IsRandomLetterStart
				{
					public const string _1033 = "Is Random Letter Start";
				}

				public static class UseBacklog
				{
					public const string _1033 = "Use Backlog";
				}

				public static class UseIndexStreams
				{
					public const string _1033 = "Use Index Streams";
				}

				public static class ValidateUniqueString
				{
					public const string _1033 = "Validate Unique String";
				}

				public static class LastResetDate
				{
					public const string _1033 = "Last Reset Date";
				}

				public static class Locking
				{
					public const string _1033 = "Locking";
				}

				public static class Name
				{
					public const string _1033 = "Name";
				}

				public static class NumberLetterRatio
				{
					public const string _1033 = "Number Letter Ratio";
				}

				public static class AutoregisterStepStage
				{
					public const string _1033 = "Auto-register Step Stage";
				}

				public static class ReplacementCharacters
				{
					public const string _1033 = "Replacement Characters";
				}

				public static class ResetDate
				{
					public const string _1033 = "Reset Date";
				}

				public static class ResetIndex
				{
					public const string _1033 = "Reset Index";
				}

				public static class ResetInterval
				{
					public const string _1033 = "Reset Interval";
				}

				public static class TriggerID
				{
					public const string _1033 = "Trigger ID";
				}

				public static class UniqueID
				{
					public const string _1033 = "Unique ID";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string AutoNumberingBacklogsOfAutoNumberingConfig = "ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId";
				public const string AutoNumberingStreamsOfAutoNumberingConfig = "ldv_autonumbering_autonumberingstream_AutoNumberingConfigId";
			}
			
			public static class NToOne
			{

				public static class Lookups
				{
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region AutoNumberingBacklog

	/// <summary>
	/// 'ldv_autonumberingbacklog'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_autonumberingbacklog")]
	public partial class AutoNumberingBacklog : GeneratedEntity
	{
		
		public AutoNumberingBacklog() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Auto-Numbering Backlog";
		public const string SchemaName = "ldv_autonumberingbacklog";
		public const string EntityLogicalName = "ldv_autonumberingbacklog";
		public const int EntityTypeCode = 10015;
		
		#region Attributes

		[AttributeLogicalName("ldv_autonumberingbacklogid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (AutoNumberingBacklogId == null || AutoNumberingBacklogId == Guid.Empty) ? base.Id : AutoNumberingBacklogId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_autonumberingbacklogid");
                    base.Id = value;
                } else {
				    AutoNumberingBacklogId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_autonumberingbacklogId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_autonumberingbacklogid")]
		public Guid? AutoNumberingBacklogId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_autonumberingbacklogid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_autonumberingbacklogid"))
				    value = (Guid?) backupAttributeCollection["ldv_autonumberingbacklogid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutoNumberingBacklogId");
                if (value != null)
					SetAttributeValue("ldv_autonumberingbacklogid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("AutoNumberingBacklogId");
			}
		}

		[AttributeLogicalName("ldv_autonumberingconfigid"), Required]
		public Guid? AutoNumberingConfig
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_autonumberingconfigid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_autonumberingconfigid"))
				    value = (EntityReference) backupAttributeCollection["ldv_autonumberingconfigid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("AutoNumberingConfig");
                if (value != null)
				    SetAttributeValue("ldv_autonumberingconfigid", new EntityReference("ldv_autonumbering", value.Value));
                else
					SetAttributeValue("ldv_autonumberingconfigid", value);
				OnPropertyChanged("AutoNumberingConfig");
			}
		}

        public string AutoNumberingConfigName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_autonumberingconfigid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_autonumberingconfigid"))
				    value = (EntityReference) backupAttributeCollection["ldv_autonumberingconfigid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_indexvalue"), Required, InRange("0", "2147483647", typeof(int))]
		public int? IndexValue
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_indexvalue");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_indexvalue"))
				    value = (int?) backupAttributeCollection["ldv_indexvalue"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IndexValue");
					SetAttributeValue("ldv_indexvalue", value);
				OnPropertyChanged("IndexValue");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

		[AttributeLogicalName("ldv_streamfieldname"), MaxLength(4000)]
		public string StreamFieldName
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_streamfieldname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_streamfieldname"))
				    value = (string) backupAttributeCollection["ldv_streamfieldname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StreamFieldName");
					SetAttributeValue("ldv_streamfieldname", value);
				OnPropertyChanged("StreamFieldName");
			}
		}

		[AttributeLogicalName("ldv_streamfieldvalue"), MaxLength(1048576)]
		public string StreamFieldValue
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_streamfieldvalue");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_streamfieldvalue"))
				    value = (string) backupAttributeCollection["ldv_streamfieldvalue"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StreamFieldValue");
					SetAttributeValue("ldv_streamfieldvalue", value);
				OnPropertyChanged("StreamFieldValue");
			}
		}

		[AttributeLogicalName("ldv_triggerid"), Required, MaxLength(36)]
		public string TriggerID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_triggerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_triggerid"))
				    value = (string) backupAttributeCollection["ldv_triggerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TriggerID");
					SetAttributeValue("ldv_triggerid", value);
				OnPropertyChanged("TriggerID");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Auto-Numbering Backlog
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Auto-Numbering Backlog
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:1, 'ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId'
		/// </summary>
		[RelationshipSchemaName("ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId"), AttributeLogicalName("ldv_autonumberingconfigid")]
		public AutoNumbering AutoNumberingAsAutoNumberingConfig
		{
			get
			{
				return GetRelatedEntity<AutoNumbering>("ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId", null);
			}
			set
			{
				OnPropertyChanging("AutoNumberingAsAutoNumberingConfig");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<AutoNumbering>("ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId", null, value);
				OnPropertyChanged("AutoNumberingAsAutoNumberingConfig");
			}
		}
		
		public class RelationNames {
			public const string AutoNumberingAsAutoNumberingConfig = "AutoNumberingAsAutoNumberingConfig";
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["AutoNumberingAsAutoNumberingConfig"] = new object[] { "AutoNumberingAsAutoNumberingConfig", "ldv_autonumbering", "ldv_autonumberingbacklog", "ldv_autonumberingid", "ldv_autonumberingconfigid", "ldv_autonumberingbacklogid", "ldv_autonumberingbacklogid", "ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId", typeof (AutoNumbering) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public AutoNumberingBacklog(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_autonumberingbacklogid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return CrmHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return CrmHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string AutoNumberingBacklogId = "ldv_autonumberingbacklogid";
			public const string AutoNumberingConfig = "ldv_autonumberingconfigid";
			public const string IndexValue = "ldv_indexvalue";
			public const string Name = "ldv_name";
			public const string StreamFieldName = "ldv_streamfieldname";
			public const string StreamFieldValue = "ldv_streamfieldvalue";
			public const string TriggerID = "ldv_triggerid";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string AutoNumberingBacklogId = "ldv_autonumberingbacklogId";
				public const string AutoNumberingConfig = "ldv_AutoNumberingConfigId";
				public const string IndexValue = "ldv_IndexValue";
				public const string Name = "ldv_name";
				public const string StreamFieldName = "ldv_StreamFieldName";
				public const string StreamFieldValue = "ldv_StreamFieldValue";
				public const string TriggerID = "ldv_TriggerID";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class AutoNumberingBacklogId
				{
					public const string _1033 = "Auto-Numbering Backlog";
				}

				public static class AutoNumberingConfig
				{
					public const string _1033 = "Auto-Numbering Config";
				}

				public static class IndexValue
				{
					public const string _1033 = "Index Value";
				}

				public static class Name
				{
					public const string _1033 = "Name";
				}

				public static class StreamFieldName
				{
					public const string _1033 = "Stream Field Name";
				}

				public static class StreamFieldValue
				{
					public const string _1033 = "Stream Field Value";
				}

				public static class TriggerID
				{
					public const string _1033 = "Trigger ID";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{
				public const string AutoNumberingAsAutoNumberingConfig = "ldv_autonumbering_autonumberingbacklog_AutoNumberingConfigId";

				public static class Lookups
				{
					public const string AutoNumberingAsAutoNumberingConfig = "ldv_autonumberingconfigid";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region AutoNumberingStream

	/// <summary>
	/// 'ldv_autonumberingstream'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_autonumberingstream")]
	public partial class AutoNumberingStream : GeneratedEntity
	{
		
		public AutoNumberingStream() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Auto-Numbering Stream";
		public const string SchemaName = "ldv_autonumberingstream";
		public const string EntityLogicalName = "ldv_autonumberingstream";
		public const int EntityTypeCode = 10018;
		
		#region Attributes

		[AttributeLogicalName("ldv_autonumberingstreamid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (AutoNumberingStreamId == null || AutoNumberingStreamId == Guid.Empty) ? base.Id : AutoNumberingStreamId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_autonumberingstreamid");
                    base.Id = value;
                } else {
				    AutoNumberingStreamId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

		[AttributeLogicalName("ldv_autonumberingconfigid"), Required]
		public Guid? AutoNumberingConfig
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_autonumberingconfigid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_autonumberingconfigid"))
				    value = (EntityReference) backupAttributeCollection["ldv_autonumberingconfigid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("AutoNumberingConfig");
                if (value != null)
				    SetAttributeValue("ldv_autonumberingconfigid", new EntityReference("ldv_autonumbering", value.Value));
                else
					SetAttributeValue("ldv_autonumberingconfigid", value);
				OnPropertyChanged("AutoNumberingConfig");
			}
		}

        public string AutoNumberingConfigName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_autonumberingconfigid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_autonumberingconfigid"))
				    value = (EntityReference) backupAttributeCollection["ldv_autonumberingconfigid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ldv_autonumberingstreamId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_autonumberingstreamid")]
		public Guid? AutoNumberingStreamId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_autonumberingstreamid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_autonumberingstreamid"))
				    value = (Guid?) backupAttributeCollection["ldv_autonumberingstreamid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutoNumberingStreamId");
                if (value != null)
					SetAttributeValue("ldv_autonumberingstreamid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("AutoNumberingStreamId");
			}
		}

		[AttributeLogicalName("ldv_currentindex"), Required, InRange("0", "2147483647", typeof(int))]
		public int? CurrentIndex
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_currentindex");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_currentindex"))
				    value = (int?) backupAttributeCollection["ldv_currentindex"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentIndex");
					SetAttributeValue("ldv_currentindex", value);
				OnPropertyChanged("CurrentIndex");
			}
		}

		[AttributeLogicalName("ldv_fieldname"), Required, MaxLength(4000)]
		public string FieldName
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_fieldname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_fieldname"))
				    value = (string) backupAttributeCollection["ldv_fieldname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FieldName");
					SetAttributeValue("ldv_fieldname", value);
				OnPropertyChanged("FieldName");
			}
		}

		[AttributeLogicalName("ldv_fieldvalue"), Required, MaxLength(1048576)]
		public string FieldValue
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_fieldvalue");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_fieldvalue"))
				    value = (string) backupAttributeCollection["ldv_fieldvalue"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FieldValue");
					SetAttributeValue("ldv_fieldvalue", value);
				OnPropertyChanged("FieldValue");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Auto-Numbering Stream
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Auto-Numbering Stream
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:1, 'ldv_autonumbering_autonumberingstream_AutoNumberingConfigId'
		/// </summary>
		[RelationshipSchemaName("ldv_autonumbering_autonumberingstream_AutoNumberingConfigId"), AttributeLogicalName("ldv_autonumberingconfigid")]
		public AutoNumbering AutoNumberingAsAutoNumberingConfig
		{
			get
			{
				return GetRelatedEntity<AutoNumbering>("ldv_autonumbering_autonumberingstream_AutoNumberingConfigId", null);
			}
			set
			{
				OnPropertyChanging("AutoNumberingAsAutoNumberingConfig");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<AutoNumbering>("ldv_autonumbering_autonumberingstream_AutoNumberingConfigId", null, value);
				OnPropertyChanged("AutoNumberingAsAutoNumberingConfig");
			}
		}
		
		public class RelationNames {
			public const string AutoNumberingAsAutoNumberingConfig = "AutoNumberingAsAutoNumberingConfig";
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["AutoNumberingAsAutoNumberingConfig"] = new object[] { "AutoNumberingAsAutoNumberingConfig", "ldv_autonumbering", "ldv_autonumberingstream", "ldv_autonumberingid", "ldv_autonumberingconfigid", "ldv_autonumberingstreamid", "ldv_autonumberingstreamid", "ldv_autonumbering_autonumberingstream_AutoNumberingConfigId", typeof (AutoNumbering) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public AutoNumberingStream(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_autonumberingstreamid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region PluginType

	/// <summary>
	/// 'PluginType'.<br />
	/// Type that inherits from the IPlugin interface and is contained within a plug-in assembly.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("plugintype")]
	public partial class PluginType : GeneratedEntity
	{
		
		public PluginType() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Plug-in Type";
		public const string SchemaName = "PluginType";
		public const string EntityLogicalName = "plugintype";
		public const int EntityTypeCode = 4602;
		
		#region Attributes

		[AttributeLogicalName("plugintypeid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (PluginTypeId == null || PluginTypeId == Guid.Empty) ? base.Id : PluginTypeId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("plugintypeid");
                    base.Id = value;
                } else {
				    PluginTypeId = value;
                }
			}
		}

        /// <summary>
        /// [Required][MaximumLength=100] 
		/// 'AssemblyName'.<br />
        /// Full path name of the plug-in assembly.
        /// </summary>
		[AttributeLogicalName("assemblyname"), Required, MaxLength(100)]
		public string AssemblyName
		{
			get
			{
				var value = GetAttributeValue<string>("assemblyname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("assemblyname"))
				    value = (string) backupAttributeCollection["assemblyname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AssemblyName");
					SetAttributeValue("assemblyname", value);
				OnPropertyChanged("AssemblyName");
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public ComponentStateEnum? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("componentstate"))
				    value = (OptionSetValue) backupAttributeCollection["componentstate"];
                return value == null ? (ComponentStateEnum?) null : (ComponentStateEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ComponentState");
                if (value != null)
				    SetAttributeValue("componentstate", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("componentstate", value);
				OnPropertyChanged("ComponentState");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the plug-in type.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the plug-in type was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the plugintype.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Required][MaximumLength=32] 
		/// 'Culture'.<br />
        /// Culture code for the plug-in assembly.
        /// </summary>
		[AttributeLogicalName("culture"), Required, MaxLength(32)]
		public string Culture
		{
			get
			{
				var value = GetAttributeValue<string>("culture");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("culture"))
				    value = (string) backupAttributeCollection["culture"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Culture");
					SetAttributeValue("culture", value);
				OnPropertyChanged("Culture");
			}
		}

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization level of the plug-in type.
        /// </summary>
		[AttributeLogicalName("customizationlevel"), InRange("-255", "255", typeof(int))]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customizationlevel"))
				    value = (int?) backupAttributeCollection["customizationlevel"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomizationLevel");
					SetAttributeValue("customizationlevel", value);
				OnPropertyChanged("CustomizationLevel");
			}
		}

        /// <summary>
        /// [MaximumLength=1048576] 
		/// 'CustomWorkflowActivityInfo'.<br />
        /// Serialized Custom Activity Type information, including required arguments. For more information, see SandboxCustomActivityInfo.
        /// </summary>
		[AttributeLogicalName("customworkflowactivityinfo"), MaxLength(1048576)]
		public string CustomWorkflowActivityInfo
		{
			get
			{
				var value = GetAttributeValue<string>("customworkflowactivityinfo");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customworkflowactivityinfo"))
				    value = (string) backupAttributeCollection["customworkflowactivityinfo"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomWorkflowActivityInfo");
					SetAttributeValue("customworkflowactivityinfo", value);
				OnPropertyChanged("CustomWorkflowActivityInfo");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'Description'.<br />
        /// Description of the plug-in type.
        /// </summary>
		[AttributeLogicalName("description"), MaxLength(256)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'FriendlyName'.<br />
        /// User friendly name for the plug-in.
        /// </summary>
		[AttributeLogicalName("friendlyname"), MaxLength(256)]
		public string DisplayName_FriendlyName
		{
			get
			{
				var value = GetAttributeValue<string>("friendlyname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("friendlyname"))
				    value = (string) backupAttributeCollection["friendlyname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DisplayName_FriendlyName");
					SetAttributeValue("friendlyname", value);
				OnPropertyChanged("DisplayName_FriendlyName");
			}
		}

		[AttributeLogicalName("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ismanaged"))
				    value = (bool?) backupAttributeCollection["ismanaged"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsManaged");
					SetAttributeValue("ismanaged", value);
				OnPropertyChanged("IsManaged");
			}
		}

        /// <summary>
        ///  
		/// 'IsWorkflowActivity'.<br />
        /// Indicates if the plug-in is a custom activity for workflows.
        /// </summary>
		[AttributeLogicalName("isworkflowactivity")]
		public bool? IsWorkflowActivity
		{
			get
			{
				var value = GetAttributeValue<bool?>("isworkflowactivity");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isworkflowactivity"))
				    value = (bool?) backupAttributeCollection["isworkflowactivity"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsWorkflowActivity");
					SetAttributeValue("isworkflowactivity", value);
				OnPropertyChanged("IsWorkflowActivity");
			}
		}

        /// <summary>
        /// [Range(0, 65534)] 
		/// 'Major'.<br />
        /// Major of the version number of the assembly for the plug-in type.
        /// </summary>
		[AttributeLogicalName("major"), InRange("0", "65534", typeof(int))]
		public int? Versionmajor
		{
			get
			{
				var value = GetAttributeValue<int?>("major");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("major"))
				    value = (int?) backupAttributeCollection["major"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Versionmajor");
					SetAttributeValue("major", value);
				OnPropertyChanged("Versionmajor");
			}
		}

        /// <summary>
        /// [Range(0, 65534)] 
		/// 'Minor'.<br />
        /// Minor of the version number of the assembly for the plug-in type.
        /// </summary>
		[AttributeLogicalName("minor"), InRange("0", "65534", typeof(int))]
		public int? Versionminor
		{
			get
			{
				var value = GetAttributeValue<int?>("minor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("minor"))
				    value = (int?) backupAttributeCollection["minor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Versionminor");
					SetAttributeValue("minor", value);
				OnPropertyChanged("Versionminor");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the plug-in type.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the plug-in type was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the plugintype.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=256] 
		/// 'Name'.<br />
        /// Name of the plug-in type.
        /// </summary>
		[AttributeLogicalName("name"), MaxLength(256)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("name"))
				    value = (string) backupAttributeCollection["name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the plug-in type is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OrganizationId");
                if (value != null)
				    SetAttributeValue("organizationid", new EntityReference("organization", value.Value));
                else
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("OrganizationId");
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overwritetime"))
				    value = (DateTime?) backupAttributeCollection["overwritetime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordOverwriteTime");
					SetAttributeValue("overwritetime", value);
				OnPropertyChanged("RecordOverwriteTime");
			}
		}

        /// <summary>
        ///  
		/// 'PluginAssemblyId'.<br />
        /// Unique identifier of the plug-in assembly that contains this plug-in type.
        /// </summary>
		[AttributeLogicalName("pluginassemblyid")]
		public Guid? PluginAssembly
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("pluginassemblyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pluginassemblyid"))
				    value = (EntityReference) backupAttributeCollection["pluginassemblyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PluginAssembly");
                if (value != null)
				    SetAttributeValue("pluginassemblyid", new EntityReference("pluginassembly", value.Value));
                else
					SetAttributeValue("pluginassemblyid", value);
				OnPropertyChanged("PluginAssembly");
			}
		}

        public string PluginAssemblyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("pluginassemblyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pluginassemblyid"))
				    value = (EntityReference) backupAttributeCollection["pluginassemblyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PluginTypeId'.<br />
        /// Unique identifier of the plug-in type.
        /// </summary>
		[AttributeLogicalName("plugintypeid")]
		public Guid? PluginTypeId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("plugintypeid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("plugintypeid"))
				    value = (Guid?) backupAttributeCollection["plugintypeid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PluginTypeId");
                if (value != null)
					SetAttributeValue("plugintypeid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("PluginTypeId");
			}
		}

        /// <summary>
        ///  
		/// 'PluginTypeIdUnique'.<br />
        /// Unique identifier of the plug-in type.
        /// </summary>
		[AttributeLogicalName("plugintypeidunique")]
		public Guid? PluginTypeIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("plugintypeidunique");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("plugintypeidunique"))
				    value = (Guid?) backupAttributeCollection["plugintypeidunique"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PluginTypeIdUnique");
					SetAttributeValue("plugintypeidunique", value);
				OnPropertyChanged("PluginTypeIdUnique");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=32] 
		/// 'PublicKeyToken'.<br />
        /// Public key token of the assembly for the plug-in type.
        /// </summary>
		[AttributeLogicalName("publickeytoken"), Required, MaxLength(32)]
		public string PublicKeyToken
		{
			get
			{
				var value = GetAttributeValue<string>("publickeytoken");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("publickeytoken"))
				    value = (string) backupAttributeCollection["publickeytoken"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PublicKeyToken");
					SetAttributeValue("publickeytoken", value);
				OnPropertyChanged("PublicKeyToken");
			}
		}

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("solutionid"))
				    value = (Guid?) backupAttributeCollection["solutionid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Solution_SolutionId");
					SetAttributeValue("solutionid", value);
				OnPropertyChanged("Solution_SolutionId");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'TypeName'.<br />
        /// Fully qualified type name of the plug-in type.
        /// </summary>
		[AttributeLogicalName("typename"), MaxLength(256)]
		public string TypeName
		{
			get
			{
				var value = GetAttributeValue<string>("typename");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("typename"))
				    value = (string) backupAttributeCollection["typename"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TypeName");
					SetAttributeValue("typename", value);
				OnPropertyChanged("TypeName");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=48] 
		/// 'Version'.<br />
        /// Version number of the assembly for the plug-in type.
        /// </summary>
		[AttributeLogicalName("version"), Required, MaxLength(48)]
		public string Version
		{
			get
			{
				var value = GetAttributeValue<string>("version");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("version"))
				    value = (string) backupAttributeCollection["version"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Version");
					SetAttributeValue("version", value);
				OnPropertyChanged("Version");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'WorkflowActivityGroupName'.<br />
        /// Group name of workflow custom activity.
        /// </summary>
		[AttributeLogicalName("workflowactivitygroupname"), MaxLength(256)]
		public string WorkflowActivityGroupName
		{
			get
			{
				var value = GetAttributeValue<string>("workflowactivitygroupname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("workflowactivitygroupname"))
				    value = (string) backupAttributeCollection["workflowactivitygroupname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WorkflowActivityGroupName");
					SetAttributeValue("workflowactivitygroupname", value);
				OnPropertyChanged("WorkflowActivityGroupName");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'plugintype_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("plugintype_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfEventHandler
		{
			get
			{
				var enumerable = GetRelatedEntities<SdkMessageProcessingStep>("plugintype_sdkmessageprocessingstep", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("SdkMessageProcessingStepsOfEventHandler");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<SdkMessageProcessingStep>("plugintype_sdkmessageprocessingstep", null, value);
				OnPropertyChanged("SdkMessageProcessingStepsOfEventHandler");
			}
		}
		
		/// <summary>
		/// 1:N, 'plugintypeid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("plugintypeid_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfPlugInType
		{
			get
			{
				var enumerable = GetRelatedEntities<SdkMessageProcessingStep>("plugintypeid_sdkmessageprocessingstep", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("SdkMessageProcessingStepsOfPlugInType");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<SdkMessageProcessingStep>("plugintypeid_sdkmessageprocessingstep", null, value);
				OnPropertyChanged("SdkMessageProcessingStepsOfPlugInType");
			}
		}
		
		public class RelationNames {
			public const string SdkMessageProcessingStepsOfEventHandler = "SdkMessageProcessingStepsOfEventHandler";
			public const string SdkMessageProcessingStepsOfPlugInType = "SdkMessageProcessingStepsOfPlugInType";
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SdkMessageProcessingStepsOfEventHandler"] = new object[] { "SdkMessageProcessingStepsOfEventHandler", "sdkmessageprocessingstep", "plugintype", "eventhandler", "plugintypeid", "plugintypeid", "plugintypeid", "plugintype_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			relationProperties["SdkMessageProcessingStepsOfPlugInType"] = new object[] { "SdkMessageProcessingStepsOfPlugInType", "sdkmessageprocessingstep", "plugintype", "plugintypeid", "plugintypeid", "plugintypeid", "plugintypeid", "plugintypeid_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public PluginType(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["plugintypeid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region ComponentState

		public enum ComponentStateEnum
		{
			[EnumMember]Published = 0,
			[EnumMember]Unpublished = 1,
			[EnumMember]Deleted = 2,
			[EnumMember]DeletedUnpublished = 3,
		}

		#endregion
	
		#region IsManaged

		public enum IsManagedEnum
		{
			[EnumMember]Managed = 1,
			[EnumMember]Unmanaged = 0,
		}

		#endregion
	
		#region IsWorkflowActivity

		public enum IsWorkflowActivityEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region SdkMessage

	/// <summary>
	/// 'SdkMessage'.<br />
	/// Message that is supported by the SDK.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("sdkmessage")]
	public partial class SdkMessage : GeneratedEntity
	{
		
		public SdkMessage() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Sdk Message";
		public const string SchemaName = "SdkMessage";
		public const string EntityLogicalName = "sdkmessage";
		public const int EntityTypeCode = 4606;
		
		#region Attributes

		[AttributeLogicalName("sdkmessageid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (SdkMessageIdId == null || SdkMessageIdId == Guid.Empty) ? base.Id : SdkMessageIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("sdkmessageid");
                    base.Id = value;
                } else {
				    SdkMessageIdId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AutoTransact'.<br />
        /// Information about whether the SDK message is automatically transacted.
        /// </summary>
		[AttributeLogicalName("autotransact")]
		public bool? AutoTransact
		{
			get
			{
				var value = GetAttributeValue<bool?>("autotransact");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("autotransact"))
				    value = (bool?) backupAttributeCollection["autotransact"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutoTransact");
					SetAttributeValue("autotransact", value);
				OnPropertyChanged("AutoTransact");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'Availability'.<br />
        /// Identifies where a method will be exposed. 0 - Server, 1 - Client, 2 - both.
        /// </summary>
		[AttributeLogicalName("availability"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? Availability
		{
			get
			{
				var value = GetAttributeValue<int?>("availability");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("availability"))
				    value = (int?) backupAttributeCollection["availability"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Availability");
					SetAttributeValue("availability", value);
				OnPropertyChanged("Availability");
			}
		}

        /// <summary>
        /// [MaximumLength=25] 
		/// 'CategoryName'.<br />
        /// If this is a categorized method, this is the name, otherwise None.
        /// </summary>
		[AttributeLogicalName("categoryname"), MaxLength(25)]
		public string CategoryName
		{
			get
			{
				var value = GetAttributeValue<string>("categoryname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("categoryname"))
				    value = (string) backupAttributeCollection["categoryname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CategoryName");
					SetAttributeValue("categoryname", value);
				OnPropertyChanged("CategoryName");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the SDK message.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the SDK message was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the sdkmessage.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization level of the SDK message.
        /// </summary>
		[AttributeLogicalName("customizationlevel"), InRange("-255", "255", typeof(int))]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customizationlevel"))
				    value = (int?) backupAttributeCollection["customizationlevel"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomizationLevel");
					SetAttributeValue("customizationlevel", value);
				OnPropertyChanged("CustomizationLevel");
			}
		}

        /// <summary>
        ///  
		/// 'Expand'.<br />
        /// Indicates whether the SDK message should have its requests expanded per primary entity defined in its filters.
        /// </summary>
		[AttributeLogicalName("expand")]
		public bool? Expand
		{
			get
			{
				var value = GetAttributeValue<bool?>("expand");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("expand"))
				    value = (bool?) backupAttributeCollection["expand"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Expand");
					SetAttributeValue("expand", value);
				OnPropertyChanged("Expand");
			}
		}

        /// <summary>
        ///  
		/// 'IsActive'.<br />
        /// Information about whether the SDK message is active.
        /// </summary>
		[AttributeLogicalName("isactive")]
		public bool? IsActive
		{
			get
			{
				var value = GetAttributeValue<bool?>("isactive");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isactive"))
				    value = (bool?) backupAttributeCollection["isactive"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsActive");
					SetAttributeValue("isactive", value);
				OnPropertyChanged("IsActive");
			}
		}

        /// <summary>
        ///  
		/// 'IsPrivate'.<br />
        /// Indicates whether the SDK message is private.
        /// </summary>
		[AttributeLogicalName("isprivate")]
		public bool? IsPrivate
		{
			get
			{
				var value = GetAttributeValue<bool?>("isprivate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isprivate"))
				    value = (bool?) backupAttributeCollection["isprivate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsPrivate");
					SetAttributeValue("isprivate", value);
				OnPropertyChanged("IsPrivate");
			}
		}

        /// <summary>
        ///  
		/// 'IsReadOnly'.<br />
        /// Identifies whether an SDK message will be ReadOnly or Read Write. false - ReadWrite, true - ReadOnly .
        /// </summary>
		[AttributeLogicalName("isreadonly")]
		public bool? Intent
		{
			get
			{
				var value = GetAttributeValue<bool?>("isreadonly");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isreadonly"))
				    value = (bool?) backupAttributeCollection["isreadonly"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Intent");
					SetAttributeValue("isreadonly", value);
				OnPropertyChanged("Intent");
			}
		}

        /// <summary>
        ///  
		/// 'IsValidForExecuteAsync'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("isvalidforexecuteasync")]
		public bool? IsValidforExecuteAsync
		{
			get
			{
				var value = GetAttributeValue<bool?>("isvalidforexecuteasync");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isvalidforexecuteasync"))
				    value = (bool?) backupAttributeCollection["isvalidforexecuteasync"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsValidforExecuteAsync");
					SetAttributeValue("isvalidforexecuteasync", value);
				OnPropertyChanged("IsValidforExecuteAsync");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the SDK message.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the SDK message was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the sdkmessage.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=256] 
		/// 'Name'.<br />
        /// Name of the SDK message.
        /// </summary>
		[AttributeLogicalName("name"), MaxLength(256)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("name"))
				    value = (string) backupAttributeCollection["name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the SDK message is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OrganizationId");
                if (value != null)
				    SetAttributeValue("organizationid", new EntityReference("organization", value.Value));
                else
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("OrganizationId");
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SdkMessageId'.<br />
        /// Unique identifier of the SDK message entity.
        /// </summary>
		[AttributeLogicalName("sdkmessageid")]
		public Guid? SdkMessageIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageid"))
				    value = (Guid?) backupAttributeCollection["sdkmessageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SdkMessageIdId");
                if (value != null)
					SetAttributeValue("sdkmessageid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("SdkMessageIdId");
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageIdUnique'.<br />
        /// Unique identifier of the SDK message.
        /// </summary>
		[AttributeLogicalName("sdkmessageidunique")]
		public Guid? SdkMessageIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageidunique");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageidunique"))
				    value = (Guid?) backupAttributeCollection["sdkmessageidunique"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SdkMessageIdUnique");
					SetAttributeValue("sdkmessageidunique", value);
				OnPropertyChanged("SdkMessageIdUnique");
			}
		}

        /// <summary>
        ///  
		/// 'Template'.<br />
        /// Indicates whether the SDK message is a template.
        /// </summary>
		[AttributeLogicalName("template")]
		public bool? Template
		{
			get
			{
				var value = GetAttributeValue<bool?>("template");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("template"))
				    value = (bool?) backupAttributeCollection["template"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Template");
					SetAttributeValue("template", value);
				OnPropertyChanged("Template");
			}
		}

        /// <summary>
        /// [MaximumLength=512] 
		/// 'ThrottleSettings'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("throttlesettings"), MaxLength(512)]
		public string ThrottleSettings
		{
			get
			{
				var value = GetAttributeValue<string>("throttlesettings");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("throttlesettings"))
				    value = (string) backupAttributeCollection["throttlesettings"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ThrottleSettings");
					SetAttributeValue("throttlesettings", value);
				OnPropertyChanged("ThrottleSettings");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Number that identifies a specific revision of the SDK message. 
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'WorkflowSdkStepEnabled'.<br />
        /// Whether or not the SDK message can be called from a workflow.
        /// </summary>
		[AttributeLogicalName("workflowsdkstepenabled")]
		public bool? WorkflowSdkStepEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("workflowsdkstepenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("workflowsdkstepenabled"))
				    value = (bool?) backupAttributeCollection["workflowsdkstepenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WorkflowSdkStepEnabled");
					SetAttributeValue("workflowsdkstepenabled", value);
				OnPropertyChanged("WorkflowSdkStepEnabled");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'sdkmessageid_sdkmessagefilter'
		/// </summary>
		[RelationshipSchemaName("sdkmessageid_sdkmessagefilter")]
		public SdkMessageFilter[] SdkMessageFiltersOfSDKMessageID
		{
			get
			{
				var enumerable = GetRelatedEntities<SdkMessageFilter>("sdkmessageid_sdkmessagefilter", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("SdkMessageFiltersOfSDKMessageID");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<SdkMessageFilter>("sdkmessageid_sdkmessagefilter", null, value);
				OnPropertyChanged("SdkMessageFiltersOfSDKMessageID");
			}
		}
		
		/// <summary>
		/// 1:N, 'sdkmessageid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("sdkmessageid_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfSDKMessage
		{
			get
			{
				var enumerable = GetRelatedEntities<SdkMessageProcessingStep>("sdkmessageid_sdkmessageprocessingstep", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("SdkMessageProcessingStepsOfSDKMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<SdkMessageProcessingStep>("sdkmessageid_sdkmessageprocessingstep", null, value);
				OnPropertyChanged("SdkMessageProcessingStepsOfSDKMessage");
			}
		}
		
		public class RelationNames {
			public const string SdkMessageFiltersOfSDKMessageID = "SdkMessageFiltersOfSDKMessageID";
			public const string SdkMessageProcessingStepsOfSDKMessage = "SdkMessageProcessingStepsOfSDKMessage";
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SdkMessageFiltersOfSDKMessageID"] = new object[] { "SdkMessageFiltersOfSDKMessageID", "sdkmessagefilter", "sdkmessage", "sdkmessageid", "sdkmessageid", "sdkmessageid", "sdkmessageid", "sdkmessageid_sdkmessagefilter", typeof (SdkMessageFilter[]) };
			relationProperties["SdkMessageProcessingStepsOfSDKMessage"] = new object[] { "SdkMessageProcessingStepsOfSDKMessage", "sdkmessageprocessingstep", "sdkmessage", "sdkmessageid", "sdkmessageid", "sdkmessageid", "sdkmessageid", "sdkmessageid_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public SdkMessage(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["sdkmessageid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region AutoTransact

		public enum AutoTransactEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Expand

		public enum ExpandEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsActive

		public enum IsActiveEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsPrivate

		public enum IsPrivateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Intent

		public enum IntentEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsValidforExecuteAsync

		public enum IsValidforExecuteAsyncEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Template

		public enum TemplateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region WorkflowSdkStepEnabled

		public enum WorkflowSdkStepEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region SdkMessageFilter

	/// <summary>
	/// 'SdkMessageFilter'.<br />
	/// Filter that defines which SDK messages are valid for each type of entity.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("sdkmessagefilter")]
	public partial class SdkMessageFilter : GeneratedEntity
	{
		
		public SdkMessageFilter() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Sdk Message Filter";
		public const string SchemaName = "SdkMessageFilter";
		public const string EntityLogicalName = "sdkmessagefilter";
		public const int EntityTypeCode = 4607;
		
		#region Attributes

		[AttributeLogicalName("sdkmessagefilterid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (SdkMessageFilterIdId == null || SdkMessageFilterIdId == Guid.Empty) ? base.Id : SdkMessageFilterIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("sdkmessagefilterid");
                    base.Id = value;
                } else {
				    SdkMessageFilterIdId = value;
                }
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'Availability'.<br />
        /// Identifies where a method will be exposed. 0 - Server, 1 - Client, 2 - both.
        /// </summary>
		[AttributeLogicalName("availability"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? Availability
		{
			get
			{
				var value = GetAttributeValue<int?>("availability");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("availability"))
				    value = (int?) backupAttributeCollection["availability"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Availability");
					SetAttributeValue("availability", value);
				OnPropertyChanged("Availability");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the SDK message filter.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the SDK message filter was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the sdkmessagefilter.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization level of the SDK message filter.
        /// </summary>
		[AttributeLogicalName("customizationlevel"), InRange("-255", "255", typeof(int))]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customizationlevel"))
				    value = (int?) backupAttributeCollection["customizationlevel"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomizationLevel");
					SetAttributeValue("customizationlevel", value);
				OnPropertyChanged("CustomizationLevel");
			}
		}

        /// <summary>
        ///  
		/// 'IsCustomProcessingStepAllowed'.<br />
        /// Indicates whether a custom SDK message processing step is allowed.
        /// </summary>
		[AttributeLogicalName("iscustomprocessingstepallowed")]
		public bool? CustomProcessingStepAllowed
		{
			get
			{
				var value = GetAttributeValue<bool?>("iscustomprocessingstepallowed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("iscustomprocessingstepallowed"))
				    value = (bool?) backupAttributeCollection["iscustomprocessingstepallowed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomProcessingStepAllowed");
					SetAttributeValue("iscustomprocessingstepallowed", value);
				OnPropertyChanged("CustomProcessingStepAllowed");
			}
		}

        /// <summary>
        ///  
		/// 'IsVisible'.<br />
        /// Indicates whether the filter should be visible.
        /// </summary>
		[AttributeLogicalName("isvisible")]
		public bool? IsVisible
		{
			get
			{
				var value = GetAttributeValue<bool?>("isvisible");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isvisible"))
				    value = (bool?) backupAttributeCollection["isvisible"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsVisible");
					SetAttributeValue("isvisible", value);
				OnPropertyChanged("IsVisible");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the SDK message filter.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the SDK message filter was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the sdkmessagefilter.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the SDK message filter is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OrganizationId");
                if (value != null)
				    SetAttributeValue("organizationid", new EntityReference("organization", value.Value));
                else
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("OrganizationId");
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PrimaryObjectTypeCode'.<br />
        /// Type of entity with which the SDK message filter is primarily associated.
        /// </summary>
		[AttributeLogicalName("primaryobjecttypecode")]
		public string PrimaryObjectTypeCode
		{
			get
			{
				var value = GetAttributeValue<string>("primaryobjecttypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("primaryobjecttypecode"))
				    value = (string) backupAttributeCollection["primaryobjecttypecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PrimaryObjectTypeCode");
					SetAttributeValue("primaryobjecttypecode", value);
				OnPropertyChanged("PrimaryObjectTypeCode");
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageFilterId'.<br />
        /// Unique identifier of the SDK message filter entity.
        /// </summary>
		[AttributeLogicalName("sdkmessagefilterid")]
		public Guid? SdkMessageFilterIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessagefilterid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessagefilterid"))
				    value = (Guid?) backupAttributeCollection["sdkmessagefilterid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SdkMessageFilterIdId");
                if (value != null)
					SetAttributeValue("sdkmessagefilterid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("SdkMessageFilterIdId");
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageFilterIdUnique'.<br />
        /// Unique identifier of the SDK message filter.
        /// </summary>
		[AttributeLogicalName("sdkmessagefilteridunique")]
		public Guid? SdkMessageFilterIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessagefilteridunique");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessagefilteridunique"))
				    value = (Guid?) backupAttributeCollection["sdkmessagefilteridunique"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SdkMessageFilterIdUnique");
					SetAttributeValue("sdkmessagefilteridunique", value);
				OnPropertyChanged("SdkMessageFilterIdUnique");
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageId'.<br />
        /// Unique identifier of the related SDK message.
        /// </summary>
		[AttributeLogicalName("sdkmessageid")]
		public Guid? SDKMessageID
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sdkmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageid"))
				    value = (EntityReference) backupAttributeCollection["sdkmessageid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SDKMessageID");
                if (value != null)
				    SetAttributeValue("sdkmessageid", new EntityReference("sdkmessage", value.Value));
                else
					SetAttributeValue("sdkmessageid", value);
				OnPropertyChanged("SDKMessageID");
			}
		}

        public string SDKMessageIDName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sdkmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageid"))
				    value = (EntityReference) backupAttributeCollection["sdkmessageid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SecondaryObjectTypeCode'.<br />
        /// Type of entity with which the SDK message filter is secondarily associated.
        /// </summary>
		[AttributeLogicalName("secondaryobjecttypecode")]
		public string SecondaryObjectTypeCode
		{
			get
			{
				var value = GetAttributeValue<string>("secondaryobjecttypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("secondaryobjecttypecode"))
				    value = (string) backupAttributeCollection["secondaryobjecttypecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SecondaryObjectTypeCode");
					SetAttributeValue("secondaryobjecttypecode", value);
				OnPropertyChanged("SecondaryObjectTypeCode");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'WorkflowSdkStepEnabled'.<br />
        /// Whether or not the SDK message can be called from a workflow.
        /// </summary>
		[AttributeLogicalName("workflowsdkstepenabled")]
		public bool? WorkflowSdkStepEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("workflowsdkstepenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("workflowsdkstepenabled"))
				    value = (bool?) backupAttributeCollection["workflowsdkstepenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WorkflowSdkStepEnabled");
					SetAttributeValue("workflowsdkstepenabled", value);
				OnPropertyChanged("WorkflowSdkStepEnabled");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'sdkmessagefilterid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("sdkmessagefilterid_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfSdkMessageFilter
		{
			get
			{
				var enumerable = GetRelatedEntities<SdkMessageProcessingStep>("sdkmessagefilterid_sdkmessageprocessingstep", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("SdkMessageProcessingStepsOfSdkMessageFilter");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<SdkMessageProcessingStep>("sdkmessagefilterid_sdkmessageprocessingstep", null, value);
				OnPropertyChanged("SdkMessageProcessingStepsOfSdkMessageFilter");
			}
		}
		
		/// <summary>
		/// N:1, 'sdkmessageid_sdkmessagefilter'
		/// </summary>
		[RelationshipSchemaName("sdkmessageid_sdkmessagefilter"), AttributeLogicalName("sdkmessageid")]
		public SdkMessage SdkMessageAsSDKMessageID
		{
			get
			{
				return GetRelatedEntity<SdkMessage>("sdkmessageid_sdkmessagefilter", null);
			}
			set
			{
				OnPropertyChanging("SdkMessageAsSDKMessageID");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SdkMessage>("sdkmessageid_sdkmessagefilter", null, value);
				OnPropertyChanged("SdkMessageAsSDKMessageID");
			}
		}
		
		public class RelationNames {
			public const string SdkMessageProcessingStepsOfSdkMessageFilter = "SdkMessageProcessingStepsOfSdkMessageFilter";
			public const string SdkMessageAsSDKMessageID = "SdkMessageAsSDKMessageID";
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SdkMessageProcessingStepsOfSdkMessageFilter"] = new object[] { "SdkMessageProcessingStepsOfSdkMessageFilter", "sdkmessageprocessingstep", "sdkmessagefilter", "sdkmessagefilterid", "sdkmessagefilterid", "sdkmessagefilterid", "sdkmessagefilterid", "sdkmessagefilterid_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			relationProperties["SdkMessageAsSDKMessageID"] = new object[] { "SdkMessageAsSDKMessageID", "sdkmessage", "sdkmessagefilter", "sdkmessageid", "sdkmessageid", "sdkmessagefilterid", "sdkmessagefilterid", "sdkmessageid_sdkmessagefilter", typeof (SdkMessage) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public SdkMessageFilter(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["sdkmessagefilterid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region CustomProcessingStepAllowed

		public enum CustomProcessingStepAllowedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsVisible

		public enum IsVisibleEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PrimaryObjectTypeCode

		public enum PrimaryObjectTypeCodeEnum
		{
		}

		#endregion
	
		#region SecondaryObjectTypeCode

		public enum SecondaryObjectTypeCodeEnum
		{
		}

		#endregion
	
		#region WorkflowSdkStepEnabled

		public enum WorkflowSdkStepEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region SdkMessageProcessingStep

	/// <summary>
	/// 'SdkMessageProcessingStep'.<br />
	/// Stage in the execution pipeline that a plug-in is to execute.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("sdkmessageprocessingstep")]
	public partial class SdkMessageProcessingStep : GeneratedEntity
	{
		
		public SdkMessageProcessingStep() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Sdk Message Processing Step";
		public const string SchemaName = "SdkMessageProcessingStep";
		public const string EntityLogicalName = "sdkmessageprocessingstep";
		public const int EntityTypeCode = 4608;
		
		#region Attributes

		[AttributeLogicalName("sdkmessageprocessingstepid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (SdkMessageProcessingStepIdId == null || SdkMessageProcessingStepIdId == Guid.Empty) ? base.Id : SdkMessageProcessingStepIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("sdkmessageprocessingstepid");
                    base.Id = value;
                } else {
				    SdkMessageProcessingStepIdId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AsyncAutoDelete'.<br />
        /// Indicates whether the asynchronous system job is automatically deleted on completion.
        /// </summary>
		[AttributeLogicalName("asyncautodelete")]
		public bool? AsynchronousAutomaticDelete
		{
			get
			{
				var value = GetAttributeValue<bool?>("asyncautodelete");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("asyncautodelete"))
				    value = (bool?) backupAttributeCollection["asyncautodelete"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AsynchronousAutomaticDelete");
					SetAttributeValue("asyncautodelete", value);
				OnPropertyChanged("AsynchronousAutomaticDelete");
			}
		}

        /// <summary>
        ///  
		/// 'CanUseReadOnlyConnection'.<br />
        /// Identifies whether a SDK Message Processing Step type will be ReadOnly or Read Write. false - ReadWrite, true - ReadOnly 
        /// </summary>
		[AttributeLogicalName("canusereadonlyconnection")]
		public bool? Intent
		{
			get
			{
				var value = GetAttributeValue<bool?>("canusereadonlyconnection");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("canusereadonlyconnection"))
				    value = (bool?) backupAttributeCollection["canusereadonlyconnection"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Intent");
					SetAttributeValue("canusereadonlyconnection", value);
				OnPropertyChanged("Intent");
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public ComponentStateEnum? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("componentstate"))
				    value = (OptionSetValue) backupAttributeCollection["componentstate"];
                return value == null ? (ComponentStateEnum?) null : (ComponentStateEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ComponentState");
                if (value != null)
				    SetAttributeValue("componentstate", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("componentstate", value);
				OnPropertyChanged("ComponentState");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'Configuration'.<br />
        /// Step-specific configuration for the plug-in type. Passed to the plug-in constructor at run time.
        /// </summary>
		[AttributeLogicalName("configuration"), MaxLength(1073741823)]
		public string Configuration
		{
			get
			{
				var value = GetAttributeValue<string>("configuration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("configuration"))
				    value = (string) backupAttributeCollection["configuration"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Configuration");
					SetAttributeValue("configuration", value);
				OnPropertyChanged("Configuration");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the SDK message processing step was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the sdkmessageprocessingstep.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization level of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("customizationlevel"), InRange("-255", "255", typeof(int))]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customizationlevel"))
				    value = (int?) backupAttributeCollection["customizationlevel"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomizationLevel");
					SetAttributeValue("customizationlevel", value);
				OnPropertyChanged("CustomizationLevel");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'Description'.<br />
        /// Description of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("description"), MaxLength(256)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        ///  
		/// 'EventHandler'.<br />
        /// Unique identifier of the associated event handler.
        /// </summary>
		[AttributeLogicalName("eventhandler")]
		public EntityReference EventHandler
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("eventhandler");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("eventhandler"))
				    value = (EntityReference) backupAttributeCollection["eventhandler"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EventHandler");
					SetAttributeValue("eventhandler", value);
				OnPropertyChanged("EventHandler");
			}
		}

        public string EventHandlerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("eventhandler");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("eventhandler"))
				    value = (EntityReference) backupAttributeCollection["eventhandler"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=100000] 
		/// 'FilteringAttributes'.<br />
        /// Comma-separated list of attributes. If at least one of these attributes is modified, the plug-in should execute.
        /// </summary>
		[AttributeLogicalName("filteringattributes"), MaxLength(100000)]
		public string FilteringAttributes
		{
			get
			{
				var value = GetAttributeValue<string>("filteringattributes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("filteringattributes"))
				    value = (string) backupAttributeCollection["filteringattributes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FilteringAttributes");
					SetAttributeValue("filteringattributes", value);
				OnPropertyChanged("FilteringAttributes");
			}
		}

        /// <summary>
        ///  
		/// 'ImpersonatingUserId'.<br />
        /// Unique identifier of the user to impersonate context when step is executed.
        /// </summary>
		[AttributeLogicalName("impersonatinguserid")]
		public Guid? ImpersonatingUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("impersonatinguserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("impersonatinguserid"))
				    value = (EntityReference) backupAttributeCollection["impersonatinguserid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ImpersonatingUser");
                if (value != null)
				    SetAttributeValue("impersonatinguserid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("impersonatinguserid", value);
				OnPropertyChanged("ImpersonatingUser");
			}
		}

        public string ImpersonatingUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("impersonatinguserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("impersonatinguserid"))
				    value = (EntityReference) backupAttributeCollection["impersonatinguserid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=48] 
		/// 'IntroducedVersion'.<br />
        /// Version in which the form is introduced.
        /// </summary>
		[AttributeLogicalName("introducedversion"), MaxLength(48)]
		public string IntroducedVersion
		{
			get
			{
				var value = GetAttributeValue<string>("introducedversion");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("introducedversion"))
				    value = (string) backupAttributeCollection["introducedversion"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IntroducedVersion");
					SetAttributeValue("introducedversion", value);
				OnPropertyChanged("IntroducedVersion");
			}
		}

        /// <summary>
        ///  
		/// 'InvocationSource'.<br />
        /// Identifies if a plug-in should be executed from a parent pipeline, a child pipeline, or both.
        /// </summary>
		[AttributeLogicalName("invocationsource")]
		[Obsolete]
		public InvocationSourceEnum? InvocationSource
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("invocationsource");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("invocationsource"))
				    value = (OptionSetValue) backupAttributeCollection["invocationsource"];
                return value == null ? (InvocationSourceEnum?) null : (InvocationSourceEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("InvocationSource");
                if (value != null)
				    SetAttributeValue("invocationsource", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("invocationsource", value);
				OnPropertyChanged("InvocationSource");
			}
		}

        /// <summary>
        ///  
		/// 'IsCustomizable'.<br />
        /// Information that specifies whether this component can be customized.
        /// </summary>
		[AttributeLogicalName("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("iscustomizable");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("iscustomizable"))
				    value = (BooleanManagedProperty) backupAttributeCollection["iscustomizable"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Customizable");
					SetAttributeValue("iscustomizable", value);
				OnPropertyChanged("Customizable");
			}
		}

        /// <summary>
        ///  
		/// 'IsHidden'.<br />
        /// Information that specifies whether this component should be hidden.
        /// </summary>
		[AttributeLogicalName("ishidden")]
		public BooleanManagedProperty Hidden
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("ishidden");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ishidden"))
				    value = (BooleanManagedProperty) backupAttributeCollection["ishidden"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Hidden");
					SetAttributeValue("ishidden", value);
				OnPropertyChanged("Hidden");
			}
		}

        /// <summary>
        ///  
		/// 'IsManaged'.<br />
        /// Information that specifies whether this component is managed.
        /// </summary>
		[AttributeLogicalName("ismanaged")]
		public bool? State
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ismanaged"))
				    value = (bool?) backupAttributeCollection["ismanaged"];
			    return value;
			}
			set
			{
				OnPropertyChanging("State");
					SetAttributeValue("ismanaged", value);
				OnPropertyChanged("State");
			}
		}

        /// <summary>
        ///  
		/// 'Mode'.<br />
        /// Run-time mode of execution, for example, synchronous or asynchronous.
        /// </summary>
		[AttributeLogicalName("mode")]
		public ExecutionModeEnum? ExecutionMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("mode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mode"))
				    value = (OptionSetValue) backupAttributeCollection["mode"];
                return value == null ? (ExecutionModeEnum?) null : (ExecutionModeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ExecutionMode");
                if (value != null)
				    SetAttributeValue("mode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("mode", value);
				OnPropertyChanged("ExecutionMode");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the SDK message processing step was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the sdkmessageprocessingstep.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=256] 
		/// 'Name'.<br />
        /// Name of SdkMessage processing step.
        /// </summary>
		[AttributeLogicalName("name"), MaxLength(256)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("name"))
				    value = (string) backupAttributeCollection["name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the SDK message processing step is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OrganizationId");
                if (value != null)
				    SetAttributeValue("organizationid", new EntityReference("organization", value.Value));
                else
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("OrganizationId");
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overwritetime"))
				    value = (DateTime?) backupAttributeCollection["overwritetime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordOverwriteTime");
					SetAttributeValue("overwritetime", value);
				OnPropertyChanged("RecordOverwriteTime");
			}
		}

        /// <summary>
        ///  
		/// 'PluginTypeId'.<br />
        /// Unique identifier of the plug-in type associated with the step.
        /// </summary>
		[AttributeLogicalName("plugintypeid")]
		[Obsolete]
		public Guid? PlugInType
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("plugintypeid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("plugintypeid"))
				    value = (EntityReference) backupAttributeCollection["plugintypeid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PlugInType");
                if (value != null)
				    SetAttributeValue("plugintypeid", new EntityReference("sdkmessagefilter", value.Value));
                else
					SetAttributeValue("plugintypeid", value);
				OnPropertyChanged("PlugInType");
			}
		}

        public string PlugInTypeName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("plugintypeid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("plugintypeid"))
				    value = (EntityReference) backupAttributeCollection["plugintypeid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'Rank'.<br />
        /// Processing order within the stage.
        /// </summary>
		[AttributeLogicalName("rank"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ExecutionOrder
		{
			get
			{
				var value = GetAttributeValue<int?>("rank");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("rank"))
				    value = (int?) backupAttributeCollection["rank"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExecutionOrder");
					SetAttributeValue("rank", value);
				OnPropertyChanged("ExecutionOrder");
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageFilterId'.<br />
        /// Unique identifier of the SDK message filter.
        /// </summary>
		[AttributeLogicalName("sdkmessagefilterid")]
		public Guid? SdkMessageFilter
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sdkmessagefilterid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessagefilterid"))
				    value = (EntityReference) backupAttributeCollection["sdkmessagefilterid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SdkMessageFilter");
                if (value != null)
				    SetAttributeValue("sdkmessagefilterid", new EntityReference("sdkmessagefilter", value.Value));
                else
					SetAttributeValue("sdkmessagefilterid", value);
				OnPropertyChanged("SdkMessageFilter");
			}
		}

        public string SdkMessageFilterName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sdkmessagefilterid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessagefilterid"))
				    value = (EntityReference) backupAttributeCollection["sdkmessagefilterid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SdkMessageId'.<br />
        /// Unique identifier of the SDK message.
        /// </summary>
		[AttributeLogicalName("sdkmessageid")]
		public Guid? SDKMessage
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sdkmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageid"))
				    value = (EntityReference) backupAttributeCollection["sdkmessageid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SDKMessage");
                if (value != null)
				    SetAttributeValue("sdkmessageid", new EntityReference("sdkmessage", value.Value));
                else
					SetAttributeValue("sdkmessageid", value);
				OnPropertyChanged("SDKMessage");
			}
		}

        public string SDKMessageName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sdkmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageid"))
				    value = (EntityReference) backupAttributeCollection["sdkmessageid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepId'.<br />
        /// Unique identifier of the SDK message processing step entity.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepid")]
		public Guid? SdkMessageProcessingStepIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageprocessingstepid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageprocessingstepid"))
				    value = (Guid?) backupAttributeCollection["sdkmessageprocessingstepid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SdkMessageProcessingStepIdId");
                if (value != null)
					SetAttributeValue("sdkmessageprocessingstepid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("SdkMessageProcessingStepIdId");
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepIdUnique'.<br />
        /// Unique identifier of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepidunique")]
		public Guid? SdkMessageProcessingStepIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageprocessingstepidunique");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageprocessingstepidunique"))
				    value = (Guid?) backupAttributeCollection["sdkmessageprocessingstepidunique"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SdkMessageProcessingStepIdUnique");
					SetAttributeValue("sdkmessageprocessingstepidunique", value);
				OnPropertyChanged("SdkMessageProcessingStepIdUnique");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'SdkMessageProcessingStepSecureConfigId'.<br />
        /// Unique identifier of the Sdk message processing step secure configuration.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepsecureconfigid"), Required]
		public Guid? SDKMessageProcessingStepSecureConfiguration
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sdkmessageprocessingstepsecureconfigid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageprocessingstepsecureconfigid"))
				    value = (EntityReference) backupAttributeCollection["sdkmessageprocessingstepsecureconfigid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SDKMessageProcessingStepSecureConfiguration");
                if (value != null)
				    SetAttributeValue("sdkmessageprocessingstepsecureconfigid", new EntityReference("sdkmessageprocessingstepsecureconfig", value.Value));
                else
					SetAttributeValue("sdkmessageprocessingstepsecureconfigid", value);
				OnPropertyChanged("SDKMessageProcessingStepSecureConfiguration");
			}
		}

        public string SDKMessageProcessingStepSecureConfigurationName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sdkmessageprocessingstepsecureconfigid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageprocessingstepsecureconfigid"))
				    value = (EntityReference) backupAttributeCollection["sdkmessageprocessingstepsecureconfigid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("solutionid"))
				    value = (Guid?) backupAttributeCollection["solutionid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Solution_SolutionId");
					SetAttributeValue("solutionid", value);
				OnPropertyChanged("Solution_SolutionId");
			}
		}

        /// <summary>
        ///  
		/// 'Stage'.<br />
        /// Stage in the execution pipeline that the SDK message processing step is in.
        /// </summary>
		[AttributeLogicalName("stage")]
		public ExecutionStageEnum? ExecutionStage
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("stage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stage"))
				    value = (OptionSetValue) backupAttributeCollection["stage"];
                return value == null ? (ExecutionStageEnum?) null : (ExecutionStageEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ExecutionStage");
                if (value != null)
				    SetAttributeValue("stage", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("stage", value);
				OnPropertyChanged("ExecutionStage");
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Status of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Reason for the status of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        ///  
		/// 'SupportedDeployment'.<br />
        /// Deployment that the SDK message processing step should be executed on; server, client, or both.
        /// </summary>
		[AttributeLogicalName("supporteddeployment")]
		public DeploymentEnum? Deployment
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("supporteddeployment");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("supporteddeployment"))
				    value = (OptionSetValue) backupAttributeCollection["supporteddeployment"];
                return value == null ? (DeploymentEnum?) null : (DeploymentEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Deployment");
                if (value != null)
				    SetAttributeValue("supporteddeployment", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("supporteddeployment", value);
				OnPropertyChanged("Deployment");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Number that identifies a specific revision of the SDK message processing step. 
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'sdkmessageprocessingstepid_sdkmessageprocessingstepimage'
		/// </summary>
		[RelationshipSchemaName("sdkmessageprocessingstepid_sdkmessageprocessingstepimage")]
		public SdkMessageProcessingStepImage[] SdkMessageProcessingStepImagesOfSDKMessageProcessingStep
		{
			get
			{
				var enumerable = GetRelatedEntities<SdkMessageProcessingStepImage>("sdkmessageprocessingstepid_sdkmessageprocessingstepimage", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("SdkMessageProcessingStepImagesOfSDKMessageProcessingStep");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<SdkMessageProcessingStepImage>("sdkmessageprocessingstepid_sdkmessageprocessingstepimage", null, value);
				OnPropertyChanged("SdkMessageProcessingStepImagesOfSDKMessageProcessingStep");
			}
		}
		
		/// <summary>
		/// N:1, 'plugintype_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("plugintype_sdkmessageprocessingstep"), AttributeLogicalName("eventhandler")]
		public PluginType PluginTypeAsEventHandler
		{
			get
			{
				return GetRelatedEntity<PluginType>("plugintype_sdkmessageprocessingstep", null);
			}
			set
			{
				OnPropertyChanging("PluginTypeAsEventHandler");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<PluginType>("plugintype_sdkmessageprocessingstep", null, value);
				OnPropertyChanged("PluginTypeAsEventHandler");
			}
		}
		
		/// <summary>
		/// N:1, 'plugintypeid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("plugintypeid_sdkmessageprocessingstep"), AttributeLogicalName("plugintypeid")]
		public PluginType PluginTypeAsPlugInType
		{
			get
			{
				return GetRelatedEntity<PluginType>("plugintypeid_sdkmessageprocessingstep", null);
			}
			set
			{
				OnPropertyChanging("PluginTypeAsPlugInType");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<PluginType>("plugintypeid_sdkmessageprocessingstep", null, value);
				OnPropertyChanged("PluginTypeAsPlugInType");
			}
		}
		
		/// <summary>
		/// N:1, 'sdkmessagefilterid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("sdkmessagefilterid_sdkmessageprocessingstep"), AttributeLogicalName("sdkmessagefilterid")]
		public SdkMessageFilter SdkMessageFilterAsSdkMessageFilter
		{
			get
			{
				return GetRelatedEntity<SdkMessageFilter>("sdkmessagefilterid_sdkmessageprocessingstep", null);
			}
			set
			{
				OnPropertyChanging("SdkMessageFilterAsSdkMessageFilter");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SdkMessageFilter>("sdkmessagefilterid_sdkmessageprocessingstep", null, value);
				OnPropertyChanged("SdkMessageFilterAsSdkMessageFilter");
			}
		}
		
		/// <summary>
		/// N:1, 'sdkmessageid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("sdkmessageid_sdkmessageprocessingstep"), AttributeLogicalName("sdkmessageid")]
		public SdkMessage SdkMessageAsSDKMessage
		{
			get
			{
				return GetRelatedEntity<SdkMessage>("sdkmessageid_sdkmessageprocessingstep", null);
			}
			set
			{
				OnPropertyChanging("SdkMessageAsSDKMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SdkMessage>("sdkmessageid_sdkmessageprocessingstep", null, value);
				OnPropertyChanged("SdkMessageAsSDKMessage");
			}
		}
		
		public class RelationNames {
			public const string SdkMessageProcessingStepImagesOfSDKMessageProcessingStep = "SdkMessageProcessingStepImagesOfSDKMessageProcessingStep";
			public const string PluginTypeAsEventHandler = "PluginTypeAsEventHandler";
			public const string PluginTypeAsPlugInType = "PluginTypeAsPlugInType";
			public const string SdkMessageFilterAsSdkMessageFilter = "SdkMessageFilterAsSdkMessageFilter";
			public const string SdkMessageAsSDKMessage = "SdkMessageAsSDKMessage";
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SdkMessageProcessingStepImagesOfSDKMessageProcessingStep"] = new object[] { "SdkMessageProcessingStepImagesOfSDKMessageProcessingStep", "sdkmessageprocessingstepimage", "sdkmessageprocessingstep", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid_sdkmessageprocessingstepimage", typeof (SdkMessageProcessingStepImage[]) };
			relationProperties["PluginTypeAsEventHandler"] = new object[] { "PluginTypeAsEventHandler", "plugintype", "sdkmessageprocessingstep", "plugintypeid", "eventhandler", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "plugintype_sdkmessageprocessingstep", typeof (PluginType) };
			relationProperties["PluginTypeAsPlugInType"] = new object[] { "PluginTypeAsPlugInType", "plugintype", "sdkmessageprocessingstep", "plugintypeid", "plugintypeid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "plugintypeid_sdkmessageprocessingstep", typeof (PluginType) };
			relationProperties["SdkMessageFilterAsSdkMessageFilter"] = new object[] { "SdkMessageFilterAsSdkMessageFilter", "sdkmessagefilter", "sdkmessageprocessingstep", "sdkmessagefilterid", "sdkmessagefilterid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessagefilterid_sdkmessageprocessingstep", typeof (SdkMessageFilter) };
			relationProperties["SdkMessageAsSDKMessage"] = new object[] { "SdkMessageAsSDKMessage", "sdkmessage", "sdkmessageprocessingstep", "sdkmessageid", "sdkmessageid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessageid_sdkmessageprocessingstep", typeof (SdkMessage) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public SdkMessageProcessingStep(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["sdkmessageprocessingstepid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region AsynchronousAutomaticDelete

		public enum AsynchronousAutomaticDeleteEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Intent

		public enum IntentEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ComponentState

		public enum ComponentStateEnum
		{
			[EnumMember]Published = 0,
			[EnumMember]Unpublished = 1,
			[EnumMember]Deleted = 2,
			[EnumMember]DeletedUnpublished = 3,
		}

		#endregion
	
		#region InvocationSource

		public enum InvocationSourceEnum
		{
			[EnumMember]Internal = -1,
			[EnumMember]Parent = 0,
			[EnumMember]Child = 1,
		}

		#endregion
	
		#region State

		public enum StateEnum
		{
			[EnumMember]Managed = 1,
			[EnumMember]Unmanaged = 0,
		}

		#endregion
	
		#region ExecutionMode

		public enum ExecutionModeEnum
		{
			[EnumMember]Synchronous = 0,
			[EnumMember]Asynchronous = 1,
		}

		#endregion
	
		#region ExecutionStage

		public enum ExecutionStageEnum
		{
			[EnumMember]InitialPreoperationForinternaluseonly = 5,
			[EnumMember]Prevalidation = 10,
			[EnumMember]InternalPreoperationBeforeExternalPluginsForinternaluseonly = 15,
			[EnumMember]Preoperation = 20,
			[EnumMember]InternalPreoperationAfterExternalPluginsForinternaluseonly = 25,
			[EnumMember]MainOperationForinternaluseonly = 30,
			[EnumMember]InternalPostoperationBeforeExternalPluginsForinternaluseonly = 35,
			[EnumMember]Postoperation = 40,
			[EnumMember]InternalPostoperationAfterExternalPluginsForinternaluseonly = 45,
			[EnumMember]PostoperationDeprecated = 50,
			[EnumMember]FinalPostoperationForinternaluseonly = 55,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Enabled = 0,
			[EnumMember]Disabled = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Enabled = 1,
			[EnumMember]Disabled = 2,
		}

		#endregion
	
		#region Deployment

		public enum DeploymentEnum
		{
			[EnumMember]ServerOnly = 0,
			[EnumMember]MicrosoftDynamics365ClientforOutlookOnly = 1,
			[EnumMember]Both = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region SdkMessageProcessingStepImage

	/// <summary>
	/// 'SdkMessageProcessingStepImage'.<br />
	/// Copy of an entity's attributes before or after the core system operation.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("sdkmessageprocessingstepimage")]
	public partial class SdkMessageProcessingStepImage : GeneratedEntity
	{
		
		public SdkMessageProcessingStepImage() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Sdk Message Processing Step Image";
		public const string SchemaName = "SdkMessageProcessingStepImage";
		public const string EntityLogicalName = "sdkmessageprocessingstepimage";
		public const int EntityTypeCode = 4615;
		
		#region Attributes

		[AttributeLogicalName("sdkmessageprocessingstepimageid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (SdkMessageProcessingStepImageIdId == null || SdkMessageProcessingStepImageIdId == Guid.Empty) ? base.Id : SdkMessageProcessingStepImageIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("sdkmessageprocessingstepimageid");
                    base.Id = value;
                } else {
				    SdkMessageProcessingStepImageIdId = value;
                }
			}
		}

        /// <summary>
        /// [MaximumLength=100000] 
		/// 'Attributes'.<br />
        /// Comma-separated list of attributes that are to be passed into the SDK message processing step image.
        /// </summary>
		[AttributeLogicalName("attributes"), MaxLength(100000)]
		public string Attributes_Attributes1
		{
			get
			{
				var value = GetAttributeValue<string>("attributes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("attributes"))
				    value = (string) backupAttributeCollection["attributes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Attributes_Attributes1");
					SetAttributeValue("attributes", value);
				OnPropertyChanged("Attributes_Attributes1");
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public ComponentStateEnum? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("componentstate"))
				    value = (OptionSetValue) backupAttributeCollection["componentstate"];
                return value == null ? (ComponentStateEnum?) null : (ComponentStateEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ComponentState");
                if (value != null)
				    SetAttributeValue("componentstate", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("componentstate", value);
				OnPropertyChanged("ComponentState");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the SDK message processing step image.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the SDK message processing step image was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the sdkmessageprocessingstepimage.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization level of the SDK message processing step image.
        /// </summary>
		[AttributeLogicalName("customizationlevel"), InRange("-255", "255", typeof(int))]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customizationlevel"))
				    value = (int?) backupAttributeCollection["customizationlevel"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomizationLevel");
					SetAttributeValue("customizationlevel", value);
				OnPropertyChanged("CustomizationLevel");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'Description'.<br />
        /// Description of the SDK message processing step image.
        /// </summary>
		[AttributeLogicalName("description"), MaxLength(256)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'EntityAlias'.<br />
        /// Key name used to access the pre-image or post-image property bags in a step.
        /// </summary>
		[AttributeLogicalName("entityalias"), MaxLength(256)]
		public string EntityAlias
		{
			get
			{
				var value = GetAttributeValue<string>("entityalias");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entityalias"))
				    value = (string) backupAttributeCollection["entityalias"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntityAlias");
					SetAttributeValue("entityalias", value);
				OnPropertyChanged("EntityAlias");
			}
		}

        /// <summary>
        ///  
		/// 'ImageType'.<br />
        /// Type of image requested.
        /// </summary>
		[AttributeLogicalName("imagetype")]
		public ImageTypeEnum? ImageType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("imagetype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("imagetype"))
				    value = (OptionSetValue) backupAttributeCollection["imagetype"];
                return value == null ? (ImageTypeEnum?) null : (ImageTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ImageType");
                if (value != null)
				    SetAttributeValue("imagetype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("imagetype", value);
				OnPropertyChanged("ImageType");
			}
		}

        /// <summary>
        /// [MaximumLength=48] 
		/// 'IntroducedVersion'.<br />
        /// Version in which the form is introduced.
        /// </summary>
		[AttributeLogicalName("introducedversion"), MaxLength(48)]
		public string IntroducedVersion
		{
			get
			{
				var value = GetAttributeValue<string>("introducedversion");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("introducedversion"))
				    value = (string) backupAttributeCollection["introducedversion"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IntroducedVersion");
					SetAttributeValue("introducedversion", value);
				OnPropertyChanged("IntroducedVersion");
			}
		}

        /// <summary>
        ///  
		/// 'IsCustomizable'.<br />
        /// Information that specifies whether this component can be customized.
        /// </summary>
		[AttributeLogicalName("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("iscustomizable");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("iscustomizable"))
				    value = (BooleanManagedProperty) backupAttributeCollection["iscustomizable"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Customizable");
					SetAttributeValue("iscustomizable", value);
				OnPropertyChanged("Customizable");
			}
		}

		[AttributeLogicalName("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ismanaged"))
				    value = (bool?) backupAttributeCollection["ismanaged"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsManaged");
					SetAttributeValue("ismanaged", value);
				OnPropertyChanged("IsManaged");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'MessagePropertyName'.<br />
        /// Name of the property on the Request message.
        /// </summary>
		[AttributeLogicalName("messagepropertyname"), MaxLength(256)]
		public string MessagePropertyName
		{
			get
			{
				var value = GetAttributeValue<string>("messagepropertyname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("messagepropertyname"))
				    value = (string) backupAttributeCollection["messagepropertyname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MessagePropertyName");
					SetAttributeValue("messagepropertyname", value);
				OnPropertyChanged("MessagePropertyName");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy_ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy_ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy_ModifiedBy");
			}
		}

        public string ModifiedBy_ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the SDK message processing step was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedBy_ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedBy_ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedBy_ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the sdkmessageprocessingstepimage.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=256] 
		/// 'Name'.<br />
        /// Name of SdkMessage processing step image.
        /// </summary>
		[AttributeLogicalName("name"), MaxLength(256)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("name"))
				    value = (string) backupAttributeCollection["name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the SDK message processing step is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OrganizationId");
                if (value != null)
				    SetAttributeValue("organizationid", new EntityReference("organization", value.Value));
                else
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("OrganizationId");
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overwritetime"))
				    value = (DateTime?) backupAttributeCollection["overwritetime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordOverwriteTime");
					SetAttributeValue("overwritetime", value);
				OnPropertyChanged("RecordOverwriteTime");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'RelatedAttributeName'.<br />
        /// Name of the related entity.
        /// </summary>
		[AttributeLogicalName("relatedattributename"), MaxLength(256)]
		public string RelatedAttributeName
		{
			get
			{
				var value = GetAttributeValue<string>("relatedattributename");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("relatedattributename"))
				    value = (string) backupAttributeCollection["relatedattributename"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RelatedAttributeName");
					SetAttributeValue("relatedattributename", value);
				OnPropertyChanged("RelatedAttributeName");
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepId'.<br />
        /// Unique identifier of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepid")]
		public Guid? SDKMessageProcessingStep
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sdkmessageprocessingstepid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageprocessingstepid"))
				    value = (EntityReference) backupAttributeCollection["sdkmessageprocessingstepid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SDKMessageProcessingStep");
                if (value != null)
				    SetAttributeValue("sdkmessageprocessingstepid", new EntityReference("sdkmessageprocessingstep", value.Value));
                else
					SetAttributeValue("sdkmessageprocessingstepid", value);
				OnPropertyChanged("SDKMessageProcessingStep");
			}
		}

        public string SDKMessageProcessingStepName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sdkmessageprocessingstepid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageprocessingstepid"))
				    value = (EntityReference) backupAttributeCollection["sdkmessageprocessingstepid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepImageId'.<br />
        /// Unique identifier of the SDK message processing step image entity.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepimageid")]
		public Guid? SdkMessageProcessingStepImageIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageprocessingstepimageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageprocessingstepimageid"))
				    value = (Guid?) backupAttributeCollection["sdkmessageprocessingstepimageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SdkMessageProcessingStepImageIdId");
                if (value != null)
					SetAttributeValue("sdkmessageprocessingstepimageid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("SdkMessageProcessingStepImageIdId");
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepImageIdUnique'.<br />
        /// Unique identifier of the SDK message processing step image.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepimageidunique")]
		public Guid? SdkMessageProcessingStepImageIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageprocessingstepimageidunique");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sdkmessageprocessingstepimageidunique"))
				    value = (Guid?) backupAttributeCollection["sdkmessageprocessingstepimageidunique"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SdkMessageProcessingStepImageIdUnique");
					SetAttributeValue("sdkmessageprocessingstepimageidunique", value);
				OnPropertyChanged("SdkMessageProcessingStepImageIdUnique");
			}
		}

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("solutionid"))
				    value = (Guid?) backupAttributeCollection["solutionid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Solution_SolutionId");
					SetAttributeValue("solutionid", value);
				OnPropertyChanged("Solution_SolutionId");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Number that identifies a specific revision of the step image. 
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:1, 'sdkmessageprocessingstepid_sdkmessageprocessingstepimage'
		/// </summary>
		[RelationshipSchemaName("sdkmessageprocessingstepid_sdkmessageprocessingstepimage"), AttributeLogicalName("sdkmessageprocessingstepid")]
		public SdkMessageProcessingStep SdkMessageProcessingStepAsSDKMessageProcessingStep
		{
			get
			{
				return GetRelatedEntity<SdkMessageProcessingStep>("sdkmessageprocessingstepid_sdkmessageprocessingstepimage", null);
			}
			set
			{
				OnPropertyChanging("SdkMessageProcessingStepAsSDKMessageProcessingStep");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SdkMessageProcessingStep>("sdkmessageprocessingstepid_sdkmessageprocessingstepimage", null, value);
				OnPropertyChanged("SdkMessageProcessingStepAsSDKMessageProcessingStep");
			}
		}
		
		public class RelationNames {
			public const string SdkMessageProcessingStepAsSDKMessageProcessingStep = "SdkMessageProcessingStepAsSDKMessageProcessingStep";
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SdkMessageProcessingStepAsSDKMessageProcessingStep"] = new object[] { "SdkMessageProcessingStepAsSDKMessageProcessingStep", "sdkmessageprocessingstep", "sdkmessageprocessingstepimage", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepimageid", "sdkmessageprocessingstepimageid", "sdkmessageprocessingstepid_sdkmessageprocessingstepimage", typeof (SdkMessageProcessingStep) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public SdkMessageProcessingStepImage(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["sdkmessageprocessingstepimageid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region ComponentState

		public enum ComponentStateEnum
		{
			[EnumMember]Published = 0,
			[EnumMember]Unpublished = 1,
			[EnumMember]Deleted = 2,
			[EnumMember]DeletedUnpublished = 3,
		}

		#endregion
	
		#region ImageType

		public enum ImageTypeEnum
		{
			[EnumMember]PreImage = 0,
			[EnumMember]PostImage = 1,
			[EnumMember]Both = 2,
		}

		#endregion
	
		#region IsManaged

		public enum IsManagedEnum
		{
			[EnumMember]Managed = 1,
			[EnumMember]Unmanaged = 0,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#endregion

}

