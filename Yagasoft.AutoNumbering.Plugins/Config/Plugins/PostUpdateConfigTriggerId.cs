// this file was generated by the xRM Test Framework VS Extension

#region Imports

using System;
using System.Linq;
using Yagasoft.AutoNumbering.Plugins.Helpers;
using Yagasoft.Libraries.Common;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

#endregion

namespace Yagasoft.AutoNumbering.Plugins.Config.Plugins
{
	/// <summary>
	///     This plugin ... .<br />
	///     Version: 0.1.1
	/// </summary>
	public class PostUpdateConfigTriggerId : IPlugin
	{
		public void Execute(IServiceProvider serviceProvider)
		{
			////var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
			new PostUpdateConfigTriggerIdLogic().Execute(this, serviceProvider, PluginUser.System);
		}
	}

	[Log]
	internal class PostUpdateConfigTriggerIdLogic : PluginLogic<PostUpdateConfigTriggerId>
	{
		public PostUpdateConfigTriggerIdLogic() : base("Update", PluginStage.PostOperation, AutoNumbering.EntityLogicalName)
		{ }

		[NoLog]
		protected override void ExecuteLogic()
		{
			// get the triggering record
			var target = (Entity)context.InputParameters["Target"];

			if (log.MaxLogLevel >= LogLevel.Debug)
			{
				Libraries.Common.CrmHelpers.LogAttributeValues(target.Attributes, target, log, "Target Attributes");
			}

			var autoNumberConfig = context.PostEntityImages.FirstOrDefault().Value?.ToEntity<AutoNumbering>();

			if (autoNumberConfig == null)
			{
				throw new InvalidPluginExecutionException($"Must register a full post image on step.");
			}

			if (log.MaxLogLevel >= LogLevel.Debug)
			{
				Libraries.Common.CrmHelpers.LogAttributeValues(autoNumberConfig.Attributes, autoNumberConfig, log, "Post Image Attributes");
			}

			if (string.IsNullOrEmpty(autoNumberConfig.TriggerID))
			{
				log.LogWarning($"Trigger ID is empty.");
				return;
			}

			AllocateBacklog(autoNumberConfig);
		}

		private void AllocateBacklog(AutoNumbering config)
		{
			var triggerId = config.TriggerID;
			var index = config.CurrentIndex;
			var threshold = config.BacklogThreshold;

			var backlogEntry =
				new AutoNumberingBacklog
				{
					TriggerID = triggerId,
					AutoNumberingConfig = config.Id,
				};

			// get an old backlog, if not, then create a new one
			if (threshold.HasValue)
			{
				var queryXml =
					$@"<fetch top='1' >
  <entity name='ldv_autonumberingbacklog' >
    <attribute name='ldv_autonumberingbacklogid' />
    <attribute name='ldv_indexvalue' />
    <attribute name='ldv_triggerid' />
    <filter>
      <condition attribute='modifiedon' operator='olderthan-x-minutes' value='{threshold.Value}' />
      <condition attribute='ldv_autonumberingconfigid' operator='eq' value='{config.Id}' />
    </filter>
    <order attribute='ldv_indexvalue' />
  </entity>
</fetch>";
				log.LogDebug("Query XML", queryXml);

				log.Log($"Retrieving first old backlog entry older than {threshold.Value} ...");
				var backlogEntryTemp = service.RetrieveMultiple(new FetchExpression(queryXml)).Entities.FirstOrDefault();
				log.Log($"Finished retrieving first old backlog entry.");

				if (backlogEntryTemp == null)
				{
					log.Log($"Couldn't find any old backlog entries.");

					var updatedAutoNumbering =
						new AutoNumbering
						{
							Id = config.Id
						};

					backlogEntry.IndexValue = Helper.GetNextIndex(config, updatedAutoNumbering);

					log.Log("Incrementing auto-numbering config's index ...");
					service.Update(updatedAutoNumbering);
					log.Log("Finished incrementing auto-numbering config's index.");
				}
				else
				{
					backlogEntry = backlogEntryTemp.ToEntity<AutoNumberingBacklog>();
				}
			}

			backlogEntry.TriggerID = triggerId;
			backlogEntry.KeyAttributes.Add(AutoNumberingBacklog.Fields.TriggerID, triggerId);

			log.Log($"Upserting backlog with trigger ID '{triggerId}' and index {index} ...");
			service.Execute(
				new UpsertRequest
				{
					Target = backlogEntry
				});
			log.Log($"Finished Upserting backlog.");
		}
	}
}
